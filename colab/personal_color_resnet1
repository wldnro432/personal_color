{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"mount_file_id":"1sVxEeX_6dCboNk-7MDukxWr5zWki6utD","authorship_tag":"ABX9TyPnVWmhQ1KZYhvgtzE/pb6d"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VGPF4Eoi4rhu","executionInfo":{"status":"ok","timestamp":1682434604821,"user_tz":-540,"elapsed":5,"user":{"displayName":"박민수","userId":"07044323519487942912"}},"outputId":"de2d6b1a-074d-4844-84ca-91661e614c9c"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive\n"]}],"source":["%cd drive/MyDrive"]},{"cell_type":"code","source":["!git clone https://github.com/sebastianbk/finetuned-resnet50-keras.git"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ES8bFyac4uvj","executionInfo":{"status":"ok","timestamp":1682434614407,"user_tz":-540,"elapsed":1844,"user":{"displayName":"박민수","userId":"07044323519487942912"}},"outputId":"1a622491-05c3-44f3-cbc5-f27dd59f31ef"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'finetuned-resnet50-keras'...\n","remote: Enumerating objects: 12, done.\u001b[K\n","remote: Total 12 (delta 0), reused 0 (delta 0), pack-reused 12\u001b[K\n","Unpacking objects: 100% (12/12), 2.71 KiB | 16.00 KiB/s, done.\n"]}]},{"cell_type":"code","source":["%cd drive/MyDrive/finetuned-resnet50-keras/"],"metadata":{"id":"ZVRXLCYq6rzG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682584927732,"user_tz":-540,"elapsed":1583,"user":{"displayName":"박민수","userId":"07044323519487942912"}},"outputId":"e6c66fc6-ce16-445b-8c53-6b1be74a5b89"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[Errno 2] No such file or directory: 'drive/MyDrive/finetuned-resnet50-keras/'\n","/content/drive/MyDrive/finetuned-resnet50-keras\n"]}]},{"cell_type":"markdown","source":["# resnet50 사용"],"metadata":{"id":"hDcLUQIhA4Xi"}},{"cell_type":"code","source":["!python resnet50_train.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UF1vsSE5_wQe","executionInfo":{"status":"ok","timestamp":1682481180923,"user_tz":-540,"elapsed":2285928,"user":{"displayName":"박민수","userId":"07044323519487942912"}},"outputId":"ef9e27f1-a00d-4f11-c218-c2e65a6fe94f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2023-04-26 03:14:54.902808: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n","To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n","2023-04-26 03:14:55.898447: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n","2023-04-26 03:14:57.354929: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 03:14:57.384691: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 03:14:57.384958: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","Found 486 images belonging to 4 classes.\n","Found 20 images belonging to 4 classes.\n","2023-04-26 03:14:57.591576: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 03:14:57.591918: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 03:14:57.592109: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 03:14:58.688510: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 03:14:58.688873: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 03:14:58.689104: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 03:14:58.689305: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13678 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n","/usr/local/lib/python3.9/dist-packages/keras/optimizers/legacy/adam.py:117: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super().__init__(name, **kwargs)\n","/content/drive/MyDrive/finetuned-resnet50-keras/resnet50_train.py:73: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  finetuned_model.fit_generator(batches, steps_per_epoch=num_train_steps, epochs=1000, callbacks=[early_stopping, checkpointer], validation_data=val_batches, validation_steps=num_valid_steps)\n","2023-04-26 03:15:02.484674: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype int32\n","\t [[{{node Placeholder/_0}}]]\n","Epoch 1/1000\n","2023-04-26 03:15:07.401936: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:424] Loaded cuDNN version 8700\n","1/1 [==============================] - ETA: 0s - loss: 1.3867 - accuracy: 0.26562023-04-26 03:15:20.865162: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype int32\n","\t [[{{node Placeholder/_0}}]]\n","WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 18s 18s/step - loss: 1.3867 - accuracy: 0.2656\n","Epoch 2/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3861 - accuracy: 0.2913WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 9s 9s/step - loss: 1.3861 - accuracy: 0.2913\n","Epoch 3/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3861 - accuracy: 0.2739WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3861 - accuracy: 0.2739\n","Epoch 4/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3845 - accuracy: 0.2891WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3845 - accuracy: 0.2891\n","Epoch 5/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3870 - accuracy: 0.2773WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3870 - accuracy: 0.2773\n","Epoch 6/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3855 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3855 - accuracy: 0.3304\n","Epoch 7/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3857 - accuracy: 0.2870WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3857 - accuracy: 0.2870\n","Epoch 8/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3854 - accuracy: 0.2891WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3854 - accuracy: 0.2891\n","Epoch 9/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3841 - accuracy: 0.2913WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3841 - accuracy: 0.2913\n","Epoch 10/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3862 - accuracy: 0.2773WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3862 - accuracy: 0.2773\n","Epoch 11/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3848 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3848 - accuracy: 0.3174\n","Epoch 12/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3848 - accuracy: 0.3043WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3848 - accuracy: 0.3043\n","Epoch 13/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3847 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3847 - accuracy: 0.3242\n","Epoch 14/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3852 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3852 - accuracy: 0.3174\n","Epoch 15/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3851 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3851 - accuracy: 0.3261\n","Epoch 16/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3855 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3855 - accuracy: 0.3164\n","Epoch 17/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3857 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3857 - accuracy: 0.3130\n","Epoch 18/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3863 - accuracy: 0.2773WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3863 - accuracy: 0.2773\n","Epoch 19/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3853 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3853 - accuracy: 0.3130\n","Epoch 20/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3868 - accuracy: 0.3000WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3868 - accuracy: 0.3000\n","Epoch 21/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3847 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3847 - accuracy: 0.3304\n","Epoch 22/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3849 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3849 - accuracy: 0.3242\n","Epoch 23/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3864 - accuracy: 0.2913WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3864 - accuracy: 0.2913\n","Epoch 24/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3844 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3844 - accuracy: 0.3348\n","Epoch 25/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3864 - accuracy: 0.3043WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3864 - accuracy: 0.3043\n","Epoch 26/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3844 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3844 - accuracy: 0.3261\n","Epoch 27/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3853 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3853 - accuracy: 0.3281\n","Epoch 28/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3848 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3848 - accuracy: 0.3477\n","Epoch 29/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3857 - accuracy: 0.3086WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3857 - accuracy: 0.3086\n","Epoch 30/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3853 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3853 - accuracy: 0.3130\n","Epoch 31/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3847 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3847 - accuracy: 0.3281\n","Epoch 32/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3844 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3844 - accuracy: 0.3242\n","Epoch 33/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3847 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3847 - accuracy: 0.3164\n","Epoch 34/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3857 - accuracy: 0.3087WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3857 - accuracy: 0.3087\n","Epoch 35/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3818 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3818 - accuracy: 0.3565\n","Epoch 36/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3859 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3859 - accuracy: 0.3174\n","Epoch 37/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3820 - accuracy: 0.3711WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3820 - accuracy: 0.3711\n","Epoch 38/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3829 - accuracy: 0.3633WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3829 - accuracy: 0.3633\n","Epoch 39/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3829 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3829 - accuracy: 0.3391\n","Epoch 40/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3843 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3843 - accuracy: 0.3435\n","Epoch 41/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3860 - accuracy: 0.3086WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3860 - accuracy: 0.3086\n","Epoch 42/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3851 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3851 - accuracy: 0.3217\n","Epoch 43/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3841 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3841 - accuracy: 0.3174\n","Epoch 44/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3849 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3849 - accuracy: 0.3320\n","Epoch 45/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3838 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3838 - accuracy: 0.3398\n","Epoch 46/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3844 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3844 - accuracy: 0.3261\n","Epoch 47/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3825 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3825 - accuracy: 0.3477\n","Epoch 48/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3845 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3845 - accuracy: 0.3174\n","Epoch 49/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3817 - accuracy: 0.3828WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3817 - accuracy: 0.3828\n","Epoch 50/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3843 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3843 - accuracy: 0.3203\n","Epoch 51/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3858 - accuracy: 0.2852WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3858 - accuracy: 0.2852\n","Epoch 52/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3849 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3849 - accuracy: 0.3130\n","Epoch 53/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3862 - accuracy: 0.2783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3862 - accuracy: 0.2783\n","Epoch 54/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3837 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3837 - accuracy: 0.3477\n","Epoch 55/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3847 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3847 - accuracy: 0.3304\n","Epoch 56/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3842 - accuracy: 0.3087WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3842 - accuracy: 0.3087\n","Epoch 57/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3843 - accuracy: 0.3086WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3843 - accuracy: 0.3086\n","Epoch 58/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3841 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3841 - accuracy: 0.3281\n","Epoch 59/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3837 - accuracy: 0.3125WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3837 - accuracy: 0.3125\n","Epoch 60/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3852 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3852 - accuracy: 0.3174\n","Epoch 61/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3826 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3826 - accuracy: 0.3516\n","Epoch 62/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3832 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3832 - accuracy: 0.3477\n","Epoch 63/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3824 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3824 - accuracy: 0.3594\n","Epoch 64/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3832 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3832 - accuracy: 0.3478\n","Epoch 65/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3826 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3826 - accuracy: 0.3522\n","Epoch 66/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3849 - accuracy: 0.2913WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3849 - accuracy: 0.2913\n","Epoch 67/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3822 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3822 - accuracy: 0.3516\n","Epoch 68/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3834 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3834 - accuracy: 0.3391\n","Epoch 69/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3835 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3835 - accuracy: 0.3516\n","Epoch 70/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3804 - accuracy: 0.3867WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3804 - accuracy: 0.3867\n","Epoch 71/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3861 - accuracy: 0.2783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3861 - accuracy: 0.2783\n","Epoch 72/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3848 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3848 - accuracy: 0.3281\n","Epoch 73/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3823 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3823 - accuracy: 0.3438\n","Epoch 74/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3840 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3840 - accuracy: 0.3217\n","Epoch 75/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3836 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3836 - accuracy: 0.3348\n","Epoch 76/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3823 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3823 - accuracy: 0.3516\n","Epoch 77/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3833 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3833 - accuracy: 0.3164\n","Epoch 78/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3834 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3834 - accuracy: 0.3516\n","Epoch 79/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3830 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3830 - accuracy: 0.3359\n","Epoch 80/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3835 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3835 - accuracy: 0.3320\n","Epoch 81/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3840 - accuracy: 0.3125WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3840 - accuracy: 0.3125\n","Epoch 82/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3848 - accuracy: 0.3043WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3848 - accuracy: 0.3043\n","Epoch 83/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3833 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3833 - accuracy: 0.3348\n","Epoch 84/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3834 - accuracy: 0.3043WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3834 - accuracy: 0.3043\n","Epoch 85/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3817 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3817 - accuracy: 0.3304\n","Epoch 86/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3821 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3821 - accuracy: 0.3242\n","Epoch 87/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3819 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3819 - accuracy: 0.3555\n","Epoch 88/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3837 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3837 - accuracy: 0.3164\n","Epoch 89/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3817 - accuracy: 0.3696WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3817 - accuracy: 0.3696\n","Epoch 90/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3835 - accuracy: 0.3047WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3835 - accuracy: 0.3047\n","Epoch 91/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3823 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3823 - accuracy: 0.3477\n","Epoch 92/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3803 - accuracy: 0.3739WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3803 - accuracy: 0.3739\n","Epoch 93/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3822 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3822 - accuracy: 0.3516\n","Epoch 94/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3839 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3839 - accuracy: 0.3217\n","Epoch 95/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3821 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3821 - accuracy: 0.3398\n","Epoch 96/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3816 - accuracy: 0.3633WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3816 - accuracy: 0.3633\n","Epoch 97/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3815 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3815 - accuracy: 0.3652\n","Epoch 98/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3831 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3831 - accuracy: 0.3565\n","Epoch 99/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3819 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3819 - accuracy: 0.3359\n","Epoch 100/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3842 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3842 - accuracy: 0.3217\n","Epoch 101/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3837 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3837 - accuracy: 0.3348\n","Epoch 102/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3822 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3822 - accuracy: 0.3348\n","Epoch 103/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3821 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3821 - accuracy: 0.3522\n","Epoch 104/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3820 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3820 - accuracy: 0.3359\n","Epoch 105/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3834 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3834 - accuracy: 0.3203\n","Epoch 106/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3797 - accuracy: 0.3867WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3797 - accuracy: 0.3867\n","Epoch 107/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3819 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3819 - accuracy: 0.3652\n","Epoch 108/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3811 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3811 - accuracy: 0.3609\n","Epoch 109/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3827 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3827 - accuracy: 0.3438\n","Epoch 110/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3834 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3834 - accuracy: 0.3435\n","Epoch 111/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3819 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3819 - accuracy: 0.3609\n","Epoch 112/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3838 - accuracy: 0.3125WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3838 - accuracy: 0.3125\n","Epoch 113/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3806 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3806 - accuracy: 0.3609\n","Epoch 114/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3798 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3798 - accuracy: 0.3652\n","Epoch 115/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3798 - accuracy: 0.3870WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3798 - accuracy: 0.3870\n","Epoch 116/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3827 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3827 - accuracy: 0.3304\n","Epoch 117/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3830 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3830 - accuracy: 0.3281\n","Epoch 118/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3821 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3821 - accuracy: 0.3435\n","Epoch 119/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3796 - accuracy: 0.3783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3796 - accuracy: 0.3783\n","Epoch 120/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3818 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3818 - accuracy: 0.3281\n","Epoch 121/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3809 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3809 - accuracy: 0.3565\n","Epoch 122/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3806 - accuracy: 0.3870WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3806 - accuracy: 0.3870\n","Epoch 123/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3792 - accuracy: 0.3870WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3792 - accuracy: 0.3870\n","Epoch 124/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3818 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3818 - accuracy: 0.3391\n","Epoch 125/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3823 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3823 - accuracy: 0.3320\n","Epoch 126/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3817 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3817 - accuracy: 0.3391\n","Epoch 127/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3828 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3828 - accuracy: 0.3242\n","Epoch 128/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3817 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3817 - accuracy: 0.3398\n","Epoch 129/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3833 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3833 - accuracy: 0.3217\n","Epoch 130/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3808 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3808 - accuracy: 0.3391\n","Epoch 131/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3808 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3808 - accuracy: 0.3609\n","Epoch 132/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3796 - accuracy: 0.3711WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3796 - accuracy: 0.3711\n","Epoch 133/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3804 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3804 - accuracy: 0.3478\n","Epoch 134/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3815 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3815 - accuracy: 0.3522\n","Epoch 135/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3811 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3811 - accuracy: 0.3516\n","Epoch 136/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3810 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3810 - accuracy: 0.3304\n","Epoch 137/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3811 - accuracy: 0.3696WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3811 - accuracy: 0.3696\n","Epoch 138/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3828 - accuracy: 0.3086WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3828 - accuracy: 0.3086\n","Epoch 139/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3761 - accuracy: 0.4102WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3761 - accuracy: 0.4102\n","Epoch 140/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3811 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3811 - accuracy: 0.3555\n","Epoch 141/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3795 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3795 - accuracy: 0.3609\n","Epoch 142/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3815 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3815 - accuracy: 0.3516\n","Epoch 143/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3829 - accuracy: 0.3047WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3829 - accuracy: 0.3047\n","Epoch 144/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3809 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3809 - accuracy: 0.3242\n","Epoch 145/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3813 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3813 - accuracy: 0.3398\n","Epoch 146/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3803 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3803 - accuracy: 0.3609\n","Epoch 147/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3800 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3800 - accuracy: 0.3516\n","Epoch 148/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3798 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3798 - accuracy: 0.3652\n","Epoch 149/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3802 - accuracy: 0.3828WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3802 - accuracy: 0.3828\n","Epoch 150/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3818 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3818 - accuracy: 0.3261\n","Epoch 151/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3795 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3795 - accuracy: 0.3594\n","Epoch 152/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3832 - accuracy: 0.3125WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3832 - accuracy: 0.3125\n","Epoch 153/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3827 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3827 - accuracy: 0.3348\n","Epoch 154/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3810 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3810 - accuracy: 0.3304\n","Epoch 155/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3815 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3815 - accuracy: 0.3359\n","Epoch 156/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3825 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3825 - accuracy: 0.3174\n","Epoch 157/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3812 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3812 - accuracy: 0.3359\n","Epoch 158/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3802 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3802 - accuracy: 0.3359\n","Epoch 159/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3825 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3825 - accuracy: 0.3130\n","Epoch 160/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3795 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3795 - accuracy: 0.3652\n","Epoch 161/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3802 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3802 - accuracy: 0.3435\n","Epoch 162/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3821 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3821 - accuracy: 0.3217\n","Epoch 163/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3799 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3799 - accuracy: 0.3398\n","Epoch 164/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3803 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3803 - accuracy: 0.3398\n","Epoch 165/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3808 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3808 - accuracy: 0.3304\n","Epoch 166/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3788 - accuracy: 0.3750WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3788 - accuracy: 0.3750\n","Epoch 167/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3824 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3824 - accuracy: 0.3164\n","Epoch 168/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3800 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3800 - accuracy: 0.3522\n","Epoch 169/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3790 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3790 - accuracy: 0.3555\n","Epoch 170/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3777 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3777 - accuracy: 0.3594\n","Epoch 171/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3782 - accuracy: 0.3672WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3782 - accuracy: 0.3672\n","Epoch 172/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3830 - accuracy: 0.3000WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3830 - accuracy: 0.3000\n","Epoch 173/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3768 - accuracy: 0.3696WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3768 - accuracy: 0.3696\n","Epoch 174/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3826 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3826 - accuracy: 0.3242\n","Epoch 175/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3793 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3793 - accuracy: 0.3438\n","Epoch 176/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3800 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3800 - accuracy: 0.3304\n","Epoch 177/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3816 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3816 - accuracy: 0.3217\n","Epoch 178/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3812 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3812 - accuracy: 0.3130\n","Epoch 179/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3786 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3786 - accuracy: 0.3516\n","Epoch 180/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3780 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3780 - accuracy: 0.3565\n","Epoch 181/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3812 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3812 - accuracy: 0.3130\n","Epoch 182/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3818 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3818 - accuracy: 0.3217\n","Epoch 183/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3766 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3766 - accuracy: 0.3478\n","Epoch 184/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3782 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3782 - accuracy: 0.3652\n","Epoch 185/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3819 - accuracy: 0.3087WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3819 - accuracy: 0.3087\n","Epoch 186/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3836 - accuracy: 0.2957WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3836 - accuracy: 0.2957\n","Epoch 187/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3810 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3810 - accuracy: 0.3281\n","Epoch 188/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3811 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3811 - accuracy: 0.3242\n","Epoch 189/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3814 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3814 - accuracy: 0.3203\n","Epoch 190/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3791 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3791 - accuracy: 0.3391\n","Epoch 191/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3812 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3812 - accuracy: 0.3261\n","Epoch 192/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3805 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3805 - accuracy: 0.3164\n","Epoch 193/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3814 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3814 - accuracy: 0.3174\n","Epoch 194/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3803 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3803 - accuracy: 0.3555\n","Epoch 195/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3797 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3797 - accuracy: 0.3203\n","Epoch 196/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3795 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3795 - accuracy: 0.3359\n","Epoch 197/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3786 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3786 - accuracy: 0.3391\n","Epoch 198/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3780 - accuracy: 0.3672WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3780 - accuracy: 0.3672\n","Epoch 199/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3794 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3794 - accuracy: 0.3565\n","Epoch 200/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3771 - accuracy: 0.3783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3771 - accuracy: 0.3783\n","Epoch 201/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3775 - accuracy: 0.3633WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3775 - accuracy: 0.3633\n","Epoch 202/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3785 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3785 - accuracy: 0.3478\n","Epoch 203/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3772 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3772 - accuracy: 0.3522\n","Epoch 204/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3784 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3784 - accuracy: 0.3522\n","Epoch 205/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3840 - accuracy: 0.2930WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3840 - accuracy: 0.2930\n","Epoch 206/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3788 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3788 - accuracy: 0.3477\n","Epoch 207/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3784 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3784 - accuracy: 0.3304\n","Epoch 208/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3822 - accuracy: 0.3043WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3822 - accuracy: 0.3043\n","Epoch 209/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3806 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3806 - accuracy: 0.3281\n","Epoch 210/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3785 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3785 - accuracy: 0.3477\n","Epoch 211/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3810 - accuracy: 0.3125WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3810 - accuracy: 0.3125\n","Epoch 212/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3816 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3816 - accuracy: 0.3174\n","Epoch 213/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3803 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3803 - accuracy: 0.3203\n","Epoch 214/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3796 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3796 - accuracy: 0.3348\n","Epoch 215/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3789 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3789 - accuracy: 0.3304\n","Epoch 216/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3779 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3779 - accuracy: 0.3522\n","Epoch 217/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3750 - accuracy: 0.3957WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3750 - accuracy: 0.3957\n","Epoch 218/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3787 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3787 - accuracy: 0.3391\n","Epoch 219/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3759 - accuracy: 0.3711WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3759 - accuracy: 0.3711\n","Epoch 220/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3798 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3798 - accuracy: 0.3203\n","Epoch 221/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3756 - accuracy: 0.3783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3756 - accuracy: 0.3783\n","Epoch 222/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3785 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3785 - accuracy: 0.3477\n","Epoch 223/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3782 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3782 - accuracy: 0.3359\n","Epoch 224/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3746 - accuracy: 0.3739WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3746 - accuracy: 0.3739\n","Epoch 225/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3806 - accuracy: 0.3086WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3806 - accuracy: 0.3086\n","Epoch 226/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3790 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3790 - accuracy: 0.3438\n","Epoch 227/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3760 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3760 - accuracy: 0.3565\n","Epoch 228/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3795 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3795 - accuracy: 0.3217\n","Epoch 229/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3777 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3777 - accuracy: 0.3609\n","Epoch 230/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3821 - accuracy: 0.2891WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3821 - accuracy: 0.2891\n","Epoch 231/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3745 - accuracy: 0.3867WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3745 - accuracy: 0.3867\n","Epoch 232/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3808 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3808 - accuracy: 0.3203\n","Epoch 233/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3761 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3761 - accuracy: 0.3516\n","Epoch 234/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3758 - accuracy: 0.3739WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3758 - accuracy: 0.3739\n","Epoch 235/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3779 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3779 - accuracy: 0.3304\n","Epoch 236/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3801 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3801 - accuracy: 0.3174\n","Epoch 237/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3772 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3772 - accuracy: 0.3435\n","Epoch 238/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3779 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3779 - accuracy: 0.3261\n","Epoch 239/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3801 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3801 - accuracy: 0.3203\n","Epoch 240/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3770 - accuracy: 0.3672WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3770 - accuracy: 0.3672\n","Epoch 241/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3761 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3761 - accuracy: 0.3594\n","Epoch 242/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3771 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3771 - accuracy: 0.3438\n","Epoch 243/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3789 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3789 - accuracy: 0.3359\n","Epoch 244/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3776 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3776 - accuracy: 0.3516\n","Epoch 245/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3773 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3773 - accuracy: 0.3609\n","Epoch 246/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3791 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3791 - accuracy: 0.3304\n","Epoch 247/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3780 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3780 - accuracy: 0.3348\n","Epoch 248/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3803 - accuracy: 0.3047WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3803 - accuracy: 0.3047\n","Epoch 249/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3788 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3788 - accuracy: 0.3348\n","Epoch 250/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3749 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3749 - accuracy: 0.3652\n","Epoch 251/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3776 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3776 - accuracy: 0.3477\n","Epoch 252/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3833 - accuracy: 0.2891WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3833 - accuracy: 0.2891\n","Epoch 253/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3752 - accuracy: 0.3633WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3752 - accuracy: 0.3633\n","Epoch 254/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3775 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3775 - accuracy: 0.3304\n","Epoch 255/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3832 - accuracy: 0.2812WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3832 - accuracy: 0.2812\n","Epoch 256/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3758 - accuracy: 0.3750WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3758 - accuracy: 0.3750\n","Epoch 257/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3791 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3791 - accuracy: 0.3320\n","Epoch 258/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3795 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3795 - accuracy: 0.3359\n","Epoch 259/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3786 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3786 - accuracy: 0.3522\n","Epoch 260/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3799 - accuracy: 0.3047WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3799 - accuracy: 0.3047\n","Epoch 261/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3776 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3776 - accuracy: 0.3359\n","Epoch 262/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3755 - accuracy: 0.3711WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3755 - accuracy: 0.3711\n","Epoch 263/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3813 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3813 - accuracy: 0.3130\n","Epoch 264/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3770 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3770 - accuracy: 0.3435\n","Epoch 265/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3771 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3771 - accuracy: 0.3478\n","Epoch 266/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3765 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3765 - accuracy: 0.3652\n","Epoch 267/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3772 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3772 - accuracy: 0.3609\n","Epoch 268/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3751 - accuracy: 0.3750WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3751 - accuracy: 0.3750\n","Epoch 269/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3777 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3777 - accuracy: 0.3304\n","Epoch 270/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3785 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3785 - accuracy: 0.3516\n","Epoch 271/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3761 - accuracy: 0.3633WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3761 - accuracy: 0.3633\n","Epoch 272/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3787 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3787 - accuracy: 0.3398\n","Epoch 273/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3763 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3763 - accuracy: 0.3438\n","Epoch 274/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3735 - accuracy: 0.3870WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3735 - accuracy: 0.3870\n","Epoch 275/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3819 - accuracy: 0.3043WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3819 - accuracy: 0.3043\n","Epoch 276/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3815 - accuracy: 0.3043WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3815 - accuracy: 0.3043\n","Epoch 277/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3753 - accuracy: 0.3739WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3753 - accuracy: 0.3739\n","Epoch 278/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3784 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3784 - accuracy: 0.3304\n","Epoch 279/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3812 - accuracy: 0.3125WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3812 - accuracy: 0.3125\n","Epoch 280/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3804 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3804 - accuracy: 0.3281\n","Epoch 281/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3766 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3766 - accuracy: 0.3594\n","Epoch 282/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3792 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3792 - accuracy: 0.3203\n","Epoch 283/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3746 - accuracy: 0.3711WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3746 - accuracy: 0.3711\n","Epoch 284/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3747 - accuracy: 0.3739WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3747 - accuracy: 0.3739\n","Epoch 285/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3808 - accuracy: 0.3125WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3808 - accuracy: 0.3125\n","Epoch 286/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3768 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3768 - accuracy: 0.3609\n","Epoch 287/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3781 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3781 - accuracy: 0.3391\n","Epoch 288/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3728 - accuracy: 0.3913WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3728 - accuracy: 0.3913\n","Epoch 289/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3762 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3762 - accuracy: 0.3477\n","Epoch 290/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3764 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3764 - accuracy: 0.3438\n","Epoch 291/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3803 - accuracy: 0.3000WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3803 - accuracy: 0.3000\n","Epoch 292/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3776 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3776 - accuracy: 0.3359\n","Epoch 293/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3794 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3794 - accuracy: 0.3242\n","Epoch 294/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3769 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3769 - accuracy: 0.3398\n","Epoch 295/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3788 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3788 - accuracy: 0.3203\n","Epoch 296/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3786 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3786 - accuracy: 0.3320\n","Epoch 297/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3754 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3754 - accuracy: 0.3555\n","Epoch 298/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3797 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3797 - accuracy: 0.3281\n","Epoch 299/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3781 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3781 - accuracy: 0.3164\n","Epoch 300/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3735 - accuracy: 0.3789WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3735 - accuracy: 0.3789\n","Epoch 301/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3787 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3787 - accuracy: 0.3242\n","Epoch 302/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3789 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3789 - accuracy: 0.3164\n","Epoch 303/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3813 - accuracy: 0.3125WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3813 - accuracy: 0.3125\n","Epoch 304/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3748 - accuracy: 0.3672WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3748 - accuracy: 0.3672\n","Epoch 305/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3745 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3745 - accuracy: 0.3477\n","Epoch 306/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3789 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3789 - accuracy: 0.3164\n","Epoch 307/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3747 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3747 - accuracy: 0.3438\n","Epoch 308/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3753 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3753 - accuracy: 0.3477\n","Epoch 309/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3765 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3765 - accuracy: 0.3438\n","Epoch 310/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3794 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3794 - accuracy: 0.3261\n","Epoch 311/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3775 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3775 - accuracy: 0.3281\n","Epoch 312/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3760 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3760 - accuracy: 0.3565\n","Epoch 313/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3765 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3765 - accuracy: 0.3304\n","Epoch 314/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3766 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3766 - accuracy: 0.3594\n","Epoch 315/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3766 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3766 - accuracy: 0.3478\n","Epoch 316/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3726 - accuracy: 0.3870WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3726 - accuracy: 0.3870\n","Epoch 317/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3751 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3751 - accuracy: 0.3398\n","Epoch 318/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3769 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3769 - accuracy: 0.3359\n","Epoch 319/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3789 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3789 - accuracy: 0.3261\n","Epoch 320/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3772 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3772 - accuracy: 0.3281\n","Epoch 321/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3771 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3771 - accuracy: 0.3320\n","Epoch 322/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3761 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3761 - accuracy: 0.3435\n","Epoch 323/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3715 - accuracy: 0.3739WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3715 - accuracy: 0.3739\n","Epoch 324/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3812 - accuracy: 0.2957WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3812 - accuracy: 0.2957\n","Epoch 325/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3778 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3778 - accuracy: 0.3174\n","Epoch 326/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3741 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3741 - accuracy: 0.3609\n","Epoch 327/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3754 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3754 - accuracy: 0.3398\n","Epoch 328/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3798 - accuracy: 0.2957WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3798 - accuracy: 0.2957\n","Epoch 329/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3771 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3771 - accuracy: 0.3438\n","Epoch 330/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3755 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3755 - accuracy: 0.3398\n","Epoch 331/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3705 - accuracy: 0.3828WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3705 - accuracy: 0.3828\n","Epoch 332/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3739 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3739 - accuracy: 0.3522\n","Epoch 333/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3775 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3775 - accuracy: 0.3522\n","Epoch 334/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3778 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3778 - accuracy: 0.3174\n","Epoch 335/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3749 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3749 - accuracy: 0.3398\n","Epoch 336/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3747 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3747 - accuracy: 0.3435\n","Epoch 337/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3764 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3764 - accuracy: 0.3391\n","Epoch 338/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3744 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3744 - accuracy: 0.3522\n","Epoch 339/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3764 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3764 - accuracy: 0.3242\n","Epoch 340/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3752 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3752 - accuracy: 0.3516\n","Epoch 341/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3733 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3733 - accuracy: 0.3348\n","Epoch 342/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3764 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3764 - accuracy: 0.3348\n","Epoch 343/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3747 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3747 - accuracy: 0.3359\n","Epoch 344/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3764 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3764 - accuracy: 0.3217\n","Epoch 345/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3784 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3784 - accuracy: 0.3281\n","Epoch 346/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3760 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3760 - accuracy: 0.3164\n","Epoch 347/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3716 - accuracy: 0.3696WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3716 - accuracy: 0.3696\n","Epoch 348/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3737 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3737 - accuracy: 0.3565\n","Epoch 349/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3771 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3771 - accuracy: 0.3203\n","Epoch 350/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3751 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3751 - accuracy: 0.3359\n","Epoch 351/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3741 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3741 - accuracy: 0.3261\n","Epoch 352/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3735 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3735 - accuracy: 0.3565\n","Epoch 353/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3703 - accuracy: 0.3906WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3703 - accuracy: 0.3906\n","Epoch 354/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3706 - accuracy: 0.3783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3706 - accuracy: 0.3783\n","Epoch 355/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3744 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3744 - accuracy: 0.3565\n","Epoch 356/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3735 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3735 - accuracy: 0.3594\n","Epoch 357/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3742 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3742 - accuracy: 0.3652\n","Epoch 358/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3752 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3752 - accuracy: 0.3359\n","Epoch 359/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3727 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3727 - accuracy: 0.3609\n","Epoch 360/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3743 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3743 - accuracy: 0.3348\n","Epoch 361/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3696 - accuracy: 0.3783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3696 - accuracy: 0.3783\n","Epoch 362/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3738 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3738 - accuracy: 0.3594\n","Epoch 363/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3725 - accuracy: 0.3696WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3725 - accuracy: 0.3696\n","Epoch 364/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3746 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3746 - accuracy: 0.3516\n","Epoch 365/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3726 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3726 - accuracy: 0.3438\n","Epoch 366/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3789 - accuracy: 0.3087WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3789 - accuracy: 0.3087\n","Epoch 367/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3731 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3731 - accuracy: 0.3435\n","Epoch 368/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3723 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3723 - accuracy: 0.3478\n","Epoch 369/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3733 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3733 - accuracy: 0.3281\n","Epoch 370/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3757 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3757 - accuracy: 0.3174\n","Epoch 371/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3761 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3761 - accuracy: 0.3242\n","Epoch 372/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3727 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3727 - accuracy: 0.3477\n","Epoch 373/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3760 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3760 - accuracy: 0.3174\n","Epoch 374/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3738 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3738 - accuracy: 0.3304\n","Epoch 375/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3756 - accuracy: 0.3086WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3756 - accuracy: 0.3086\n","Epoch 376/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3762 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3762 - accuracy: 0.3174\n","Epoch 377/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3758 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3758 - accuracy: 0.3174\n","Epoch 378/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3776 - accuracy: 0.3087WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3776 - accuracy: 0.3087\n","Epoch 379/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3720 - accuracy: 0.3696WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3720 - accuracy: 0.3696\n","Epoch 380/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3720 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3720 - accuracy: 0.3522\n","Epoch 381/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3760 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3760 - accuracy: 0.3348\n","Epoch 382/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3751 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3751 - accuracy: 0.3477\n","Epoch 383/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3689 - accuracy: 0.3828WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3689 - accuracy: 0.3828\n","Epoch 384/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3740 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3740 - accuracy: 0.3359\n","Epoch 385/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3761 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3761 - accuracy: 0.3261\n","Epoch 386/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3726 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3726 - accuracy: 0.3478\n","Epoch 387/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3729 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3729 - accuracy: 0.3359\n","Epoch 388/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3725 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3725 - accuracy: 0.3516\n","Epoch 389/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3786 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3786 - accuracy: 0.3130\n","Epoch 390/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3745 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3745 - accuracy: 0.3516\n","Epoch 391/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3747 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3747 - accuracy: 0.3348\n","Epoch 392/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3775 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3775 - accuracy: 0.3261\n","Epoch 393/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3702 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3702 - accuracy: 0.3652\n","Epoch 394/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3754 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3754 - accuracy: 0.3242\n","Epoch 395/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3748 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3748 - accuracy: 0.3261\n","Epoch 396/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3653 - accuracy: 0.4217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3653 - accuracy: 0.4217\n","Epoch 397/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3749 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3749 - accuracy: 0.3348\n","Epoch 398/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3756 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3756 - accuracy: 0.3320\n","Epoch 399/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3755 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3755 - accuracy: 0.3217\n","Epoch 400/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3739 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3739 - accuracy: 0.3477\n","Epoch 401/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3778 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3778 - accuracy: 0.3164\n","Epoch 402/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3746 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3746 - accuracy: 0.3348\n","Epoch 403/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3721 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3721 - accuracy: 0.3516\n","Epoch 404/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3771 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3771 - accuracy: 0.3130\n","Epoch 405/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3713 - accuracy: 0.3633WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3713 - accuracy: 0.3633\n","Epoch 406/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3742 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3742 - accuracy: 0.3398\n","Epoch 407/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3711 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3711 - accuracy: 0.3555\n","Epoch 408/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3768 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3768 - accuracy: 0.3164\n","Epoch 409/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3724 - accuracy: 0.3672WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3724 - accuracy: 0.3672\n","Epoch 410/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3762 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3762 - accuracy: 0.3261\n","Epoch 411/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3747 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3747 - accuracy: 0.3281\n","Epoch 412/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3747 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3747 - accuracy: 0.3359\n","Epoch 413/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3742 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3742 - accuracy: 0.3281\n","Epoch 414/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3784 - accuracy: 0.3047WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3784 - accuracy: 0.3047\n","Epoch 415/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3753 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3753 - accuracy: 0.3203\n","Epoch 416/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3753 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3753 - accuracy: 0.3242\n","Epoch 417/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3733 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3733 - accuracy: 0.3391\n","Epoch 418/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3739 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3739 - accuracy: 0.3391\n","Epoch 419/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3702 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3702 - accuracy: 0.3652\n","Epoch 420/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3740 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3740 - accuracy: 0.3435\n","Epoch 421/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3707 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3707 - accuracy: 0.3516\n","Epoch 422/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3694 - accuracy: 0.3696WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3694 - accuracy: 0.3696\n","Epoch 423/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3738 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3738 - accuracy: 0.3320\n","Epoch 424/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3703 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3703 - accuracy: 0.3478\n","Epoch 425/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3714 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3714 - accuracy: 0.3438\n","Epoch 426/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3739 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3739 - accuracy: 0.3304\n","Epoch 427/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3694 - accuracy: 0.3711WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3694 - accuracy: 0.3711\n","Epoch 428/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3730 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3730 - accuracy: 0.3320\n","Epoch 429/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3730 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3730 - accuracy: 0.3281\n","Epoch 430/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3736 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3736 - accuracy: 0.3359\n","Epoch 431/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3700 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3700 - accuracy: 0.3555\n","Epoch 432/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3707 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3707 - accuracy: 0.3609\n","Epoch 433/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3703 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3703 - accuracy: 0.3478\n","Epoch 434/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3652 - accuracy: 0.3906WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3652 - accuracy: 0.3906\n","Epoch 435/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3724 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3724 - accuracy: 0.3522\n","Epoch 436/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3727 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3727 - accuracy: 0.3281\n","Epoch 437/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3721 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3721 - accuracy: 0.3438\n","Epoch 438/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3723 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3723 - accuracy: 0.3398\n","Epoch 439/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3727 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3727 - accuracy: 0.3359\n","Epoch 440/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3697 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3697 - accuracy: 0.3609\n","Epoch 441/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3684 - accuracy: 0.3739WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3684 - accuracy: 0.3739\n","Epoch 442/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3691 - accuracy: 0.3739WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3691 - accuracy: 0.3739\n","Epoch 443/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3783 - accuracy: 0.2957WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3783 - accuracy: 0.2957\n","Epoch 444/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3782 - accuracy: 0.3008WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3782 - accuracy: 0.3008\n","Epoch 445/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3706 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3706 - accuracy: 0.3555\n","Epoch 446/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3712 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3712 - accuracy: 0.3565\n","Epoch 447/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3702 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3702 - accuracy: 0.3522\n","Epoch 448/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3732 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3732 - accuracy: 0.3242\n","Epoch 449/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3687 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3687 - accuracy: 0.3565\n","Epoch 450/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3740 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3740 - accuracy: 0.3217\n","Epoch 451/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3747 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3747 - accuracy: 0.3398\n","Epoch 452/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3704 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3704 - accuracy: 0.3435\n","Epoch 453/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3727 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3727 - accuracy: 0.3522\n","Epoch 454/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3724 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3724 - accuracy: 0.3359\n","Epoch 455/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3691 - accuracy: 0.3711WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3691 - accuracy: 0.3711\n","Epoch 456/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3738 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3738 - accuracy: 0.3242\n","Epoch 457/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3717 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3717 - accuracy: 0.3565\n","Epoch 458/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3689 - accuracy: 0.3783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3689 - accuracy: 0.3783\n","Epoch 459/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3735 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3735 - accuracy: 0.3348\n","Epoch 460/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3752 - accuracy: 0.3086WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3752 - accuracy: 0.3086\n","Epoch 461/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3739 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3739 - accuracy: 0.3304\n","Epoch 462/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3708 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3708 - accuracy: 0.3478\n","Epoch 463/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3766 - accuracy: 0.3086WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3766 - accuracy: 0.3086\n","Epoch 464/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3748 - accuracy: 0.3087WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3748 - accuracy: 0.3087\n","Epoch 465/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3701 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3701 - accuracy: 0.3438\n","Epoch 466/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3692 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3692 - accuracy: 0.3477\n","Epoch 467/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3749 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3749 - accuracy: 0.3242\n","Epoch 468/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3763 - accuracy: 0.3087WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3763 - accuracy: 0.3087\n","Epoch 469/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3674 - accuracy: 0.3633WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3674 - accuracy: 0.3633\n","Epoch 470/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3713 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3713 - accuracy: 0.3565\n","Epoch 471/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3737 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3737 - accuracy: 0.3281\n","Epoch 472/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3745 - accuracy: 0.3125WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3745 - accuracy: 0.3125\n","Epoch 473/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3675 - accuracy: 0.3672WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3675 - accuracy: 0.3672\n","Epoch 474/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3700 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3700 - accuracy: 0.3435\n","Epoch 475/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3722 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3722 - accuracy: 0.3348\n","Epoch 476/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3703 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3703 - accuracy: 0.3435\n","Epoch 477/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3789 - accuracy: 0.2773WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3789 - accuracy: 0.2773\n","Epoch 478/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3726 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3726 - accuracy: 0.3304\n","Epoch 479/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3715 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3715 - accuracy: 0.3478\n","Epoch 480/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3705 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3705 - accuracy: 0.3359\n","Epoch 481/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3686 - accuracy: 0.3633WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3686 - accuracy: 0.3633\n","Epoch 482/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3708 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3708 - accuracy: 0.3516\n","Epoch 483/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3736 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3736 - accuracy: 0.3320\n","Epoch 484/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3697 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3697 - accuracy: 0.3435\n","Epoch 485/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3720 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3720 - accuracy: 0.3438\n","Epoch 486/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3681 - accuracy: 0.3672WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3681 - accuracy: 0.3672\n","Epoch 487/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3688 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3688 - accuracy: 0.3522\n","Epoch 488/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3748 - accuracy: 0.3047WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3748 - accuracy: 0.3047\n","Epoch 489/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3742 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3742 - accuracy: 0.3217\n","Epoch 490/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3639 - accuracy: 0.3957WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3639 - accuracy: 0.3957\n","Epoch 491/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3766 - accuracy: 0.3043WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3766 - accuracy: 0.3043\n","Epoch 492/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3716 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3716 - accuracy: 0.3359\n","Epoch 493/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3691 - accuracy: 0.3672WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3691 - accuracy: 0.3672\n","Epoch 494/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3755 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3755 - accuracy: 0.3261\n","Epoch 495/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3744 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3744 - accuracy: 0.3242\n","Epoch 496/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3766 - accuracy: 0.2913WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3766 - accuracy: 0.2913\n","Epoch 497/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3711 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3711 - accuracy: 0.3398\n","Epoch 498/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3749 - accuracy: 0.3047WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3749 - accuracy: 0.3047\n","Epoch 499/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3681 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3681 - accuracy: 0.3477\n","Epoch 500/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3711 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3711 - accuracy: 0.3281\n","Epoch 501/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3739 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3739 - accuracy: 0.3261\n","Epoch 502/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3734 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3734 - accuracy: 0.3320\n","Epoch 503/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3712 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3712 - accuracy: 0.3304\n","Epoch 504/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3667 - accuracy: 0.3696WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3667 - accuracy: 0.3696\n","Epoch 505/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3667 - accuracy: 0.3783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3667 - accuracy: 0.3783\n","Epoch 506/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3746 - accuracy: 0.3086WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3746 - accuracy: 0.3086\n","Epoch 507/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3728 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3728 - accuracy: 0.3242\n","Epoch 508/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3691 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3691 - accuracy: 0.3435\n","Epoch 509/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3653 - accuracy: 0.3783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3653 - accuracy: 0.3783\n","Epoch 510/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3673 - accuracy: 0.3672WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3673 - accuracy: 0.3672\n","Epoch 511/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3769 - accuracy: 0.3008WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3769 - accuracy: 0.3008\n","Epoch 512/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3712 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3712 - accuracy: 0.3398\n","Epoch 513/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3715 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3715 - accuracy: 0.3391\n","Epoch 514/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3717 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3717 - accuracy: 0.3261\n","Epoch 515/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3698 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3698 - accuracy: 0.3435\n","Epoch 516/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3719 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3719 - accuracy: 0.3359\n","Epoch 517/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3677 - accuracy: 0.3783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3677 - accuracy: 0.3783\n","Epoch 518/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3716 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3716 - accuracy: 0.3261\n","Epoch 519/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3683 - accuracy: 0.3633WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3683 - accuracy: 0.3633\n","Epoch 520/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3738 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3738 - accuracy: 0.3242\n","Epoch 521/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3697 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3697 - accuracy: 0.3555\n","Epoch 522/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3697 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3697 - accuracy: 0.3478\n","Epoch 523/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3699 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3699 - accuracy: 0.3522\n","Epoch 524/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3679 - accuracy: 0.3672WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3679 - accuracy: 0.3672\n","Epoch 525/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3679 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3679 - accuracy: 0.3565\n","Epoch 526/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3723 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3723 - accuracy: 0.3242\n","Epoch 527/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3662 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3662 - accuracy: 0.3555\n","Epoch 528/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3722 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3722 - accuracy: 0.3261\n","Epoch 529/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3720 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3720 - accuracy: 0.3281\n","Epoch 530/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3706 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3706 - accuracy: 0.3565\n","Epoch 531/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3701 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3701 - accuracy: 0.3435\n","Epoch 532/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3729 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3729 - accuracy: 0.3261\n","Epoch 533/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3692 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3692 - accuracy: 0.3594\n","Epoch 534/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3689 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3689 - accuracy: 0.3609\n","Epoch 535/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3705 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3705 - accuracy: 0.3348\n","Epoch 536/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3691 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3691 - accuracy: 0.3522\n","Epoch 537/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3697 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3697 - accuracy: 0.3438\n","Epoch 538/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3722 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3722 - accuracy: 0.3359\n","Epoch 539/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3634 - accuracy: 0.3783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3634 - accuracy: 0.3783\n","Epoch 540/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3759 - accuracy: 0.3087WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3759 - accuracy: 0.3087\n","Epoch 541/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3746 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3746 - accuracy: 0.3242\n","Epoch 542/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3687 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3687 - accuracy: 0.3478\n","Epoch 543/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3752 - accuracy: 0.3000WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3752 - accuracy: 0.3000\n","Epoch 544/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3666 - accuracy: 0.3696WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3666 - accuracy: 0.3696\n","Epoch 545/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3691 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3691 - accuracy: 0.3438\n","Epoch 546/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3685 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3685 - accuracy: 0.3594\n","Epoch 547/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3728 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3728 - accuracy: 0.3217\n","Epoch 548/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3719 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3719 - accuracy: 0.3242\n","Epoch 549/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3660 - accuracy: 0.3783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3660 - accuracy: 0.3783\n","Epoch 550/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3664 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3664 - accuracy: 0.3565\n","Epoch 551/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3732 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3732 - accuracy: 0.3261\n","Epoch 552/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3631 - accuracy: 0.3826WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3631 - accuracy: 0.3826\n","Epoch 553/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3744 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3744 - accuracy: 0.3164\n","Epoch 554/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3617 - accuracy: 0.3957WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3617 - accuracy: 0.3957\n","Epoch 555/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3694 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3694 - accuracy: 0.3565\n","Epoch 556/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3686 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3686 - accuracy: 0.3522\n","Epoch 557/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3724 - accuracy: 0.3086WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3724 - accuracy: 0.3086\n","Epoch 558/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3708 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3708 - accuracy: 0.3391\n","Epoch 559/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3686 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3686 - accuracy: 0.3478\n","Epoch 560/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3728 - accuracy: 0.3125WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3728 - accuracy: 0.3125\n","Epoch 561/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3679 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3679 - accuracy: 0.3609\n","Epoch 562/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3725 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3725 - accuracy: 0.3304\n","Epoch 563/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3713 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3713 - accuracy: 0.3203\n","Epoch 564/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3668 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3668 - accuracy: 0.3594\n","Epoch 565/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3733 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3733 - accuracy: 0.3217\n","Epoch 566/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3640 - accuracy: 0.3783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3640 - accuracy: 0.3783\n","Epoch 567/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3651 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3651 - accuracy: 0.3609\n","Epoch 568/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3647 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3647 - accuracy: 0.3609\n","Epoch 569/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3680 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3680 - accuracy: 0.3438\n","Epoch 570/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3678 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3678 - accuracy: 0.3477\n","Epoch 571/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3704 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3704 - accuracy: 0.3304\n","Epoch 572/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3711 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3711 - accuracy: 0.3304\n","Epoch 573/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3702 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3702 - accuracy: 0.3242\n","Epoch 574/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3663 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3663 - accuracy: 0.3609\n","Epoch 575/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3634 - accuracy: 0.3750WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3634 - accuracy: 0.3750\n","Epoch 576/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3712 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3712 - accuracy: 0.3217\n","Epoch 577/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3696 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3696 - accuracy: 0.3348\n","Epoch 578/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3619 - accuracy: 0.3957WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3619 - accuracy: 0.3957\n","Epoch 579/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3645 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3645 - accuracy: 0.3609\n","Epoch 580/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3647 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3647 - accuracy: 0.3609\n","Epoch 581/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3681 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3681 - accuracy: 0.3477\n","Epoch 582/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3648 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3648 - accuracy: 0.3652\n","Epoch 583/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3740 - accuracy: 0.3125WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3740 - accuracy: 0.3125\n","Epoch 584/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3754 - accuracy: 0.3087WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3754 - accuracy: 0.3087\n","Epoch 585/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3742 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3742 - accuracy: 0.3261\n","Epoch 586/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3718 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3718 - accuracy: 0.3174\n","Epoch 587/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3657 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3657 - accuracy: 0.3478\n","Epoch 588/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3658 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3658 - accuracy: 0.3555\n","Epoch 589/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3702 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3702 - accuracy: 0.3217\n","Epoch 590/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3742 - accuracy: 0.2913WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3742 - accuracy: 0.2913\n","Epoch 591/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3639 - accuracy: 0.3711WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3639 - accuracy: 0.3711\n","Epoch 592/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3659 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3659 - accuracy: 0.3391\n","Epoch 593/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3682 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3682 - accuracy: 0.3391\n","Epoch 594/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3638 - accuracy: 0.3739WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3638 - accuracy: 0.3739\n","Epoch 595/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3725 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3725 - accuracy: 0.3281\n","Epoch 596/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3684 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3684 - accuracy: 0.3438\n","Epoch 597/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3699 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3699 - accuracy: 0.3242\n","Epoch 598/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3698 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3698 - accuracy: 0.3242\n","Epoch 599/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3672 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3672 - accuracy: 0.3359\n","Epoch 600/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3676 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3676 - accuracy: 0.3304\n","Epoch 601/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3718 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3718 - accuracy: 0.3174\n","Epoch 602/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3683 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3683 - accuracy: 0.3391\n","Epoch 603/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3645 - accuracy: 0.3633WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3645 - accuracy: 0.3633\n","Epoch 604/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3687 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3687 - accuracy: 0.3435\n","Epoch 605/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3758 - accuracy: 0.3087WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3758 - accuracy: 0.3087\n","Epoch 606/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3696 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3696 - accuracy: 0.3359\n","Epoch 607/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3704 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3704 - accuracy: 0.3242\n","Epoch 608/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3715 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3715 - accuracy: 0.3304\n","Epoch 609/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3653 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3653 - accuracy: 0.3435\n","Epoch 610/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3703 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3703 - accuracy: 0.3348\n","Epoch 611/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3687 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3687 - accuracy: 0.3565\n","Epoch 612/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3653 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3653 - accuracy: 0.3565\n","Epoch 613/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3667 - accuracy: 0.3739WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3667 - accuracy: 0.3739\n","Epoch 614/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3665 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3665 - accuracy: 0.3477\n","Epoch 615/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3698 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3698 - accuracy: 0.3304\n","Epoch 616/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3681 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3681 - accuracy: 0.3398\n","Epoch 617/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3662 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3662 - accuracy: 0.3391\n","Epoch 618/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3709 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3709 - accuracy: 0.3304\n","Epoch 619/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3623 - accuracy: 0.3867WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3623 - accuracy: 0.3867\n","Epoch 620/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3715 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3715 - accuracy: 0.3164\n","Epoch 621/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3683 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3683 - accuracy: 0.3304\n","Epoch 622/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3734 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3734 - accuracy: 0.3203\n","Epoch 623/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3708 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3708 - accuracy: 0.3203\n","Epoch 624/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3675 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3675 - accuracy: 0.3398\n","Epoch 625/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3703 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3703 - accuracy: 0.3217\n","Epoch 626/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3681 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3681 - accuracy: 0.3391\n","Epoch 627/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3651 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3651 - accuracy: 0.3516\n","Epoch 628/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3655 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3655 - accuracy: 0.3516\n","Epoch 629/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3681 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3681 - accuracy: 0.3359\n","Epoch 630/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3676 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3676 - accuracy: 0.3438\n","Epoch 631/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3661 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3661 - accuracy: 0.3565\n","Epoch 632/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3696 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3696 - accuracy: 0.3203\n","Epoch 633/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3666 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3666 - accuracy: 0.3516\n","Epoch 634/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3645 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3645 - accuracy: 0.3555\n","Epoch 635/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3633 - accuracy: 0.3711WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3633 - accuracy: 0.3711\n","Epoch 636/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3622 - accuracy: 0.3739WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3622 - accuracy: 0.3739\n","Epoch 637/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3662 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3662 - accuracy: 0.3438\n","Epoch 638/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3691 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3691 - accuracy: 0.3435\n","Epoch 639/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3675 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3675 - accuracy: 0.3320\n","Epoch 640/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3649 - accuracy: 0.3633WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3649 - accuracy: 0.3633\n","Epoch 641/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3696 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3696 - accuracy: 0.3348\n","Epoch 642/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3689 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3689 - accuracy: 0.3391\n","Epoch 643/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3631 - accuracy: 0.3633WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3631 - accuracy: 0.3633\n","Epoch 644/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3720 - accuracy: 0.3086WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3720 - accuracy: 0.3086\n","Epoch 645/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3693 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3693 - accuracy: 0.3130\n","Epoch 646/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3696 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3696 - accuracy: 0.3261\n","Epoch 647/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3665 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3665 - accuracy: 0.3391\n","Epoch 648/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3660 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3660 - accuracy: 0.3516\n","Epoch 649/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3682 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3682 - accuracy: 0.3391\n","Epoch 650/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3632 - accuracy: 0.3672WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3632 - accuracy: 0.3672\n","Epoch 651/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3696 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3696 - accuracy: 0.3261\n","Epoch 652/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3692 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3692 - accuracy: 0.3203\n","Epoch 653/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3648 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3648 - accuracy: 0.3435\n","Epoch 654/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3641 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3641 - accuracy: 0.3391\n","Epoch 655/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3714 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3714 - accuracy: 0.3242\n","Epoch 656/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3657 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3657 - accuracy: 0.3609\n","Epoch 657/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3656 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3656 - accuracy: 0.3435\n","Epoch 658/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3640 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3640 - accuracy: 0.3652\n","Epoch 659/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3669 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3669 - accuracy: 0.3359\n","Epoch 660/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3684 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3684 - accuracy: 0.3281\n","Epoch 661/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3692 - accuracy: 0.3043WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3692 - accuracy: 0.3043\n","Epoch 662/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3694 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3694 - accuracy: 0.3261\n","Epoch 663/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3666 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3666 - accuracy: 0.3391\n","Epoch 664/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3638 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3638 - accuracy: 0.3565\n","Epoch 665/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3663 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3663 - accuracy: 0.3398\n","Epoch 666/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3625 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3625 - accuracy: 0.3609\n","Epoch 667/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3618 - accuracy: 0.3633WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3618 - accuracy: 0.3633\n","Epoch 668/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3682 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3682 - accuracy: 0.3261\n","Epoch 669/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3666 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3666 - accuracy: 0.3304\n","Epoch 670/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3648 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3648 - accuracy: 0.3522\n","Epoch 671/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3639 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3639 - accuracy: 0.3565\n","Epoch 672/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3681 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3681 - accuracy: 0.3261\n","Epoch 673/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3651 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3651 - accuracy: 0.3609\n","Epoch 674/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3679 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3679 - accuracy: 0.3398\n","Epoch 675/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3674 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3674 - accuracy: 0.3435\n","Epoch 676/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3692 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3692 - accuracy: 0.3130\n","Epoch 677/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3652 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3652 - accuracy: 0.3391\n","Epoch 678/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3720 - accuracy: 0.3000WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3720 - accuracy: 0.3000\n","Epoch 679/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3696 - accuracy: 0.3125WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3696 - accuracy: 0.3125\n","Epoch 680/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3728 - accuracy: 0.2969WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3728 - accuracy: 0.2969\n","Epoch 681/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3629 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3629 - accuracy: 0.3555\n","Epoch 682/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3750 - accuracy: 0.3047WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3750 - accuracy: 0.3047\n","Epoch 683/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3729 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3729 - accuracy: 0.3130\n","Epoch 684/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3677 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3677 - accuracy: 0.3435\n","Epoch 685/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3727 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3727 - accuracy: 0.3130\n","Epoch 686/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3651 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3651 - accuracy: 0.3478\n","Epoch 687/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3575 - accuracy: 0.3783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3575 - accuracy: 0.3783\n","Epoch 688/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3718 - accuracy: 0.3087WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3718 - accuracy: 0.3087\n","Epoch 689/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3694 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3694 - accuracy: 0.3391\n","Epoch 690/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3633 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3633 - accuracy: 0.3522\n","Epoch 691/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3632 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3632 - accuracy: 0.3522\n","Epoch 692/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3696 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3696 - accuracy: 0.3281\n","Epoch 693/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3626 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3626 - accuracy: 0.3594\n","Epoch 694/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3630 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3630 - accuracy: 0.3555\n","Epoch 695/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3748 - accuracy: 0.3000WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3748 - accuracy: 0.3000\n","Epoch 696/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3653 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3653 - accuracy: 0.3555\n","Epoch 697/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3650 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3650 - accuracy: 0.3359\n","Epoch 698/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3606 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3606 - accuracy: 0.3652\n","Epoch 699/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3674 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3674 - accuracy: 0.3398\n","Epoch 700/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3592 - accuracy: 0.3739WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3592 - accuracy: 0.3739\n","Epoch 701/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3713 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3713 - accuracy: 0.3130\n","Epoch 702/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3619 - accuracy: 0.3672WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3619 - accuracy: 0.3672\n","Epoch 703/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3674 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3674 - accuracy: 0.3398\n","Epoch 704/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3617 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3617 - accuracy: 0.3652\n","Epoch 705/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3682 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3682 - accuracy: 0.3304\n","Epoch 706/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3639 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3639 - accuracy: 0.3391\n","Epoch 707/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3632 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3632 - accuracy: 0.3652\n","Epoch 708/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3616 - accuracy: 0.3783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3616 - accuracy: 0.3783\n","Epoch 709/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3679 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3679 - accuracy: 0.3304\n","Epoch 710/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3663 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3663 - accuracy: 0.3398\n","Epoch 711/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3634 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3634 - accuracy: 0.3398\n","Epoch 712/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3695 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3695 - accuracy: 0.3130\n","Epoch 713/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3732 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3732 - accuracy: 0.3130\n","Epoch 714/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3620 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3620 - accuracy: 0.3565\n","Epoch 715/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3656 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3656 - accuracy: 0.3348\n","Epoch 716/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3644 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3644 - accuracy: 0.3438\n","Epoch 717/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3716 - accuracy: 0.2969WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3716 - accuracy: 0.2969\n","Epoch 718/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3749 - accuracy: 0.3043WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3749 - accuracy: 0.3043\n","Epoch 719/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3650 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3650 - accuracy: 0.3304\n","Epoch 720/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3671 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3671 - accuracy: 0.3348\n","Epoch 721/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3633 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3633 - accuracy: 0.3609\n","Epoch 722/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3613 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3613 - accuracy: 0.3594\n","Epoch 723/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3684 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3684 - accuracy: 0.3359\n","Epoch 724/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3627 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3627 - accuracy: 0.3516\n","Epoch 725/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3634 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3634 - accuracy: 0.3438\n","Epoch 726/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3607 - accuracy: 0.3672WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3607 - accuracy: 0.3672\n","Epoch 727/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3701 - accuracy: 0.3047WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3701 - accuracy: 0.3047\n","Epoch 728/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3728 - accuracy: 0.3047WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3728 - accuracy: 0.3047\n","Epoch 729/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3683 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3683 - accuracy: 0.3320\n","Epoch 730/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3663 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3663 - accuracy: 0.3516\n","Epoch 731/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3675 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3675 - accuracy: 0.3130\n","Epoch 732/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3649 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3649 - accuracy: 0.3281\n","Epoch 733/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3698 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3698 - accuracy: 0.3164\n","Epoch 734/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3689 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3689 - accuracy: 0.3174\n","Epoch 735/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3677 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3677 - accuracy: 0.3281\n","Epoch 736/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3562 - accuracy: 0.3783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3562 - accuracy: 0.3783\n","Epoch 737/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3634 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3634 - accuracy: 0.3652\n","Epoch 738/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3698 - accuracy: 0.3086WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3698 - accuracy: 0.3086\n","Epoch 739/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3600 - accuracy: 0.3783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3600 - accuracy: 0.3783\n","Epoch 740/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3647 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3647 - accuracy: 0.3477\n","Epoch 741/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3757 - accuracy: 0.2783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3757 - accuracy: 0.2783\n","Epoch 742/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3714 - accuracy: 0.2891WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3714 - accuracy: 0.2891\n","Epoch 743/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3589 - accuracy: 0.3750WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3589 - accuracy: 0.3750\n","Epoch 744/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3648 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3648 - accuracy: 0.3435\n","Epoch 745/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3625 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3625 - accuracy: 0.3522\n","Epoch 746/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3682 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3682 - accuracy: 0.3164\n","Epoch 747/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3669 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3669 - accuracy: 0.3348\n","Epoch 748/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3670 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3670 - accuracy: 0.3130\n","Epoch 749/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3638 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3638 - accuracy: 0.3435\n","Epoch 750/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3690 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3690 - accuracy: 0.3164\n","Epoch 751/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3632 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3632 - accuracy: 0.3304\n","Epoch 752/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3622 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3622 - accuracy: 0.3522\n","Epoch 753/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3681 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3681 - accuracy: 0.3261\n","Epoch 754/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3681 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3681 - accuracy: 0.3130\n","Epoch 755/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3641 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3641 - accuracy: 0.3398\n","Epoch 756/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3675 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3675 - accuracy: 0.3174\n","Epoch 757/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3708 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3708 - accuracy: 0.3174\n","Epoch 758/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3598 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3598 - accuracy: 0.3565\n","Epoch 759/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3673 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3673 - accuracy: 0.3281\n","Epoch 760/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3679 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3679 - accuracy: 0.3304\n","Epoch 761/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3593 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3593 - accuracy: 0.3565\n","Epoch 762/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3613 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3613 - accuracy: 0.3522\n","Epoch 763/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3733 - accuracy: 0.2913WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3733 - accuracy: 0.2913\n","Epoch 764/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3681 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3681 - accuracy: 0.3164\n","Epoch 765/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3691 - accuracy: 0.2913WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3691 - accuracy: 0.2913\n","Epoch 766/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3717 - accuracy: 0.3043WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3717 - accuracy: 0.3043\n","Epoch 767/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3660 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3660 - accuracy: 0.3164\n","Epoch 768/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3698 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3698 - accuracy: 0.3203\n","Epoch 769/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3567 - accuracy: 0.3711WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3567 - accuracy: 0.3711\n","Epoch 770/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3569 - accuracy: 0.3739WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3569 - accuracy: 0.3739\n","Epoch 771/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3717 - accuracy: 0.3043WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3717 - accuracy: 0.3043\n","Epoch 772/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3617 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3617 - accuracy: 0.3477\n","Epoch 773/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3678 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3678 - accuracy: 0.3320\n","Epoch 774/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3699 - accuracy: 0.3043WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3699 - accuracy: 0.3043\n","Epoch 775/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3676 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3676 - accuracy: 0.3242\n","Epoch 776/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3693 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3693 - accuracy: 0.3217\n","Epoch 777/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3682 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3682 - accuracy: 0.3348\n","Epoch 778/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3662 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3662 - accuracy: 0.3398\n","Epoch 779/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3624 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3624 - accuracy: 0.3565\n","Epoch 780/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3674 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3674 - accuracy: 0.3348\n","Epoch 781/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3695 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3695 - accuracy: 0.3203\n","Epoch 782/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3621 - accuracy: 0.3696WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3621 - accuracy: 0.3696\n","Epoch 783/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3587 - accuracy: 0.3739WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3587 - accuracy: 0.3739\n","Epoch 784/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3628 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3628 - accuracy: 0.3435\n","Epoch 785/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3616 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3616 - accuracy: 0.3565\n","Epoch 786/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3666 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3666 - accuracy: 0.3478\n","Epoch 787/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3625 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3625 - accuracy: 0.3477\n","Epoch 788/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3599 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3599 - accuracy: 0.3565\n","Epoch 789/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3690 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3690 - accuracy: 0.3174\n","Epoch 790/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3633 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3633 - accuracy: 0.3435\n","Epoch 791/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3607 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3607 - accuracy: 0.3652\n","Epoch 792/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3628 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3628 - accuracy: 0.3438\n","Epoch 793/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3670 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3670 - accuracy: 0.3242\n","Epoch 794/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3681 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3681 - accuracy: 0.3304\n","Epoch 795/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3734 - accuracy: 0.2957WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3734 - accuracy: 0.2957\n","Epoch 796/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3612 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3612 - accuracy: 0.3435\n","Epoch 797/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3729 - accuracy: 0.2969WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3729 - accuracy: 0.2969\n","Epoch 798/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3636 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3636 - accuracy: 0.3348\n","Epoch 799/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3644 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3644 - accuracy: 0.3320\n","Epoch 800/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3543 - accuracy: 0.3828WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3543 - accuracy: 0.3828\n","Epoch 801/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3716 - accuracy: 0.3086WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3716 - accuracy: 0.3086\n","Epoch 802/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3593 - accuracy: 0.3696WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3593 - accuracy: 0.3696\n","Epoch 803/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3696 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3696 - accuracy: 0.3217\n","Epoch 804/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3546 - accuracy: 0.3870WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3546 - accuracy: 0.3870\n","Epoch 805/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3574 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3574 - accuracy: 0.3565\n","Epoch 806/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3591 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3591 - accuracy: 0.3652\n","Epoch 807/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3685 - accuracy: 0.3047WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3685 - accuracy: 0.3047\n","Epoch 808/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3677 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3677 - accuracy: 0.3304\n","Epoch 809/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3640 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3640 - accuracy: 0.3359\n","Epoch 810/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3640 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3640 - accuracy: 0.3391\n","Epoch 811/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3671 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3671 - accuracy: 0.3261\n","Epoch 812/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3654 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3654 - accuracy: 0.3174\n","Epoch 813/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3666 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3666 - accuracy: 0.3435\n","Epoch 814/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3655 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3655 - accuracy: 0.3164\n","Epoch 815/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3671 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3671 - accuracy: 0.3242\n","Epoch 816/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3628 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3628 - accuracy: 0.3522\n","Epoch 817/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3657 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3657 - accuracy: 0.3348\n","Epoch 818/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3711 - accuracy: 0.3086WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3711 - accuracy: 0.3086\n","Epoch 819/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3636 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3636 - accuracy: 0.3359\n","Epoch 820/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3580 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3580 - accuracy: 0.3652\n","Epoch 821/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3630 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3630 - accuracy: 0.3438\n","Epoch 822/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3665 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3665 - accuracy: 0.3281\n","Epoch 823/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3631 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3631 - accuracy: 0.3261\n","Epoch 824/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3676 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3676 - accuracy: 0.3320\n","Epoch 825/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3681 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3681 - accuracy: 0.3348\n","Epoch 826/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3654 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3654 - accuracy: 0.3398\n","Epoch 827/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3675 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3675 - accuracy: 0.3281\n","Epoch 828/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3727 - accuracy: 0.2930WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3727 - accuracy: 0.2930\n","Epoch 829/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3584 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3584 - accuracy: 0.3652\n","Epoch 830/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3677 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3677 - accuracy: 0.3242\n","Epoch 831/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3653 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3653 - accuracy: 0.3522\n","Epoch 832/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3674 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3674 - accuracy: 0.3261\n","Epoch 833/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3591 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3591 - accuracy: 0.3478\n","Epoch 834/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3652 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3652 - accuracy: 0.3391\n","Epoch 835/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3621 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3621 - accuracy: 0.3477\n","Epoch 836/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3656 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3656 - accuracy: 0.3217\n","Epoch 837/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3599 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3599 - accuracy: 0.3477\n","Epoch 838/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3662 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3662 - accuracy: 0.3281\n","Epoch 839/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3629 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3629 - accuracy: 0.3516\n","Epoch 840/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3596 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3596 - accuracy: 0.3522\n","Epoch 841/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3653 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3653 - accuracy: 0.3348\n","Epoch 842/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3568 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3568 - accuracy: 0.3594\n","Epoch 843/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3582 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3582 - accuracy: 0.3652\n","Epoch 844/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3599 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3599 - accuracy: 0.3609\n","Epoch 845/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3656 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3656 - accuracy: 0.3281\n","Epoch 846/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3699 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3699 - accuracy: 0.3164\n","Epoch 847/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3692 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3692 - accuracy: 0.3130\n","Epoch 848/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3586 - accuracy: 0.3633WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3586 - accuracy: 0.3633\n","Epoch 849/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3649 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3649 - accuracy: 0.3438\n","Epoch 850/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3607 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3607 - accuracy: 0.3565\n","Epoch 851/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3618 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3618 - accuracy: 0.3435\n","Epoch 852/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3670 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3670 - accuracy: 0.3304\n","Epoch 853/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3627 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3627 - accuracy: 0.3359\n","Epoch 854/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3569 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3569 - accuracy: 0.3594\n","Epoch 855/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3603 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3603 - accuracy: 0.3522\n","Epoch 856/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3601 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3601 - accuracy: 0.3478\n","Epoch 857/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3627 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3627 - accuracy: 0.3281\n","Epoch 858/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3622 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3622 - accuracy: 0.3477\n","Epoch 859/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3590 - accuracy: 0.3696WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3590 - accuracy: 0.3696\n","Epoch 860/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3637 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3637 - accuracy: 0.3438\n","Epoch 861/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3668 - accuracy: 0.3125WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3668 - accuracy: 0.3125\n","Epoch 862/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3582 - accuracy: 0.3739WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3582 - accuracy: 0.3739\n","Epoch 863/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3651 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3651 - accuracy: 0.3398\n","Epoch 864/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3661 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3661 - accuracy: 0.3174\n","Epoch 865/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3604 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3604 - accuracy: 0.3565\n","Epoch 866/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3689 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3689 - accuracy: 0.3130\n","Epoch 867/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3707 - accuracy: 0.2957WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3707 - accuracy: 0.2957\n","Epoch 868/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3635 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3635 - accuracy: 0.3438\n","Epoch 869/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3711 - accuracy: 0.2957WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3711 - accuracy: 0.2957\n","Epoch 870/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3568 - accuracy: 0.3652WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3568 - accuracy: 0.3652\n","Epoch 871/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3640 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3640 - accuracy: 0.3391\n","Epoch 872/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3595 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3595 - accuracy: 0.3555\n","Epoch 873/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3653 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3653 - accuracy: 0.3281\n","Epoch 874/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3683 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3683 - accuracy: 0.3164\n","Epoch 875/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3703 - accuracy: 0.2913WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3703 - accuracy: 0.2913\n","Epoch 876/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3615 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3615 - accuracy: 0.3516\n","Epoch 877/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3544 - accuracy: 0.3696WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3544 - accuracy: 0.3696\n","Epoch 878/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3565 - accuracy: 0.3789WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3565 - accuracy: 0.3789\n","Epoch 879/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3604 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3604 - accuracy: 0.3594\n","Epoch 880/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3682 - accuracy: 0.3047WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3682 - accuracy: 0.3047\n","Epoch 881/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3572 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3572 - accuracy: 0.3609\n","Epoch 882/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3576 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3576 - accuracy: 0.3594\n","Epoch 883/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3679 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3679 - accuracy: 0.3304\n","Epoch 884/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3531 - accuracy: 0.3870WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3531 - accuracy: 0.3870\n","Epoch 885/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3709 - accuracy: 0.2957WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3709 - accuracy: 0.2957\n","Epoch 886/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3586 - accuracy: 0.3711WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3586 - accuracy: 0.3711\n","Epoch 887/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3631 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3631 - accuracy: 0.3304\n","Epoch 888/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3556 - accuracy: 0.3609WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3556 - accuracy: 0.3609\n","Epoch 889/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3644 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3644 - accuracy: 0.3391\n","Epoch 890/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3622 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3622 - accuracy: 0.3304\n","Epoch 891/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3607 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3607 - accuracy: 0.3304\n","Epoch 892/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3597 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3597 - accuracy: 0.3565\n","Epoch 893/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3516 - accuracy: 0.3913WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3516 - accuracy: 0.3913\n","Epoch 894/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3584 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3584 - accuracy: 0.3478\n","Epoch 895/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3638 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3638 - accuracy: 0.3516\n","Epoch 896/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3614 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3614 - accuracy: 0.3478\n","Epoch 897/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3609 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3609 - accuracy: 0.3438\n","Epoch 898/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3660 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3660 - accuracy: 0.3130\n","Epoch 899/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3640 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3640 - accuracy: 0.3304\n","Epoch 900/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3600 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3600 - accuracy: 0.3516\n","Epoch 901/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3629 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3629 - accuracy: 0.3281\n","Epoch 902/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3638 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3638 - accuracy: 0.3320\n","Epoch 903/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3649 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3649 - accuracy: 0.3261\n","Epoch 904/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3625 - accuracy: 0.3242WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3625 - accuracy: 0.3242\n","Epoch 905/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3609 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3609 - accuracy: 0.3359\n","Epoch 906/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3666 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3666 - accuracy: 0.3164\n","Epoch 907/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3640 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3640 - accuracy: 0.3398\n","Epoch 908/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3610 - accuracy: 0.3522WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3610 - accuracy: 0.3522\n","Epoch 909/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3639 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3639 - accuracy: 0.3261\n","Epoch 910/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3588 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3588 - accuracy: 0.3555\n","Epoch 911/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3633 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3633 - accuracy: 0.3348\n","Epoch 912/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3612 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3612 - accuracy: 0.3565\n","Epoch 913/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3690 - accuracy: 0.3000WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3690 - accuracy: 0.3000\n","Epoch 914/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3713 - accuracy: 0.3000WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3713 - accuracy: 0.3000\n","Epoch 915/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3597 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3597 - accuracy: 0.3438\n","Epoch 916/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3685 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3685 - accuracy: 0.3164\n","Epoch 917/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3635 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3635 - accuracy: 0.3435\n","Epoch 918/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3593 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3593 - accuracy: 0.3478\n","Epoch 919/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3618 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3618 - accuracy: 0.3478\n","Epoch 920/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3648 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3648 - accuracy: 0.3281\n","Epoch 921/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3655 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3655 - accuracy: 0.3217\n","Epoch 922/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3638 - accuracy: 0.3203WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3638 - accuracy: 0.3203\n","Epoch 923/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3683 - accuracy: 0.2930WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3683 - accuracy: 0.2930\n","Epoch 924/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3634 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3634 - accuracy: 0.3435\n","Epoch 925/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3596 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3596 - accuracy: 0.3435\n","Epoch 926/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3533 - accuracy: 0.3711WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3533 - accuracy: 0.3711\n","Epoch 927/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3614 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3614 - accuracy: 0.3398\n","Epoch 928/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3572 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3572 - accuracy: 0.3565\n","Epoch 929/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3666 - accuracy: 0.3008WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3666 - accuracy: 0.3008\n","Epoch 930/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3679 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3679 - accuracy: 0.3164\n","Epoch 931/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3660 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3660 - accuracy: 0.3164\n","Epoch 932/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3613 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3613 - accuracy: 0.3359\n","Epoch 933/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3700 - accuracy: 0.2913WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3700 - accuracy: 0.2913\n","Epoch 934/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3587 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3587 - accuracy: 0.3478\n","Epoch 935/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3611 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3611 - accuracy: 0.3348\n","Epoch 936/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3531 - accuracy: 0.3750WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3531 - accuracy: 0.3750\n","Epoch 937/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3655 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3655 - accuracy: 0.3164\n","Epoch 938/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3531 - accuracy: 0.3696WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3531 - accuracy: 0.3696\n","Epoch 939/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3626 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3626 - accuracy: 0.3391\n","Epoch 940/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3543 - accuracy: 0.3826WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3543 - accuracy: 0.3826\n","Epoch 941/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3588 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3588 - accuracy: 0.3304\n","Epoch 942/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3613 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3613 - accuracy: 0.3320\n","Epoch 943/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3625 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3625 - accuracy: 0.3391\n","Epoch 944/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3678 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3678 - accuracy: 0.3130\n","Epoch 945/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3681 - accuracy: 0.3086WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3681 - accuracy: 0.3086\n","Epoch 946/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3525 - accuracy: 0.3750WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3525 - accuracy: 0.3750\n","Epoch 947/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3616 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3616 - accuracy: 0.3391\n","Epoch 948/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3604 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3604 - accuracy: 0.3391\n","Epoch 949/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3727 - accuracy: 0.2739WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3727 - accuracy: 0.2739\n","Epoch 950/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3596 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3596 - accuracy: 0.3359\n","Epoch 951/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3558 - accuracy: 0.3594WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3558 - accuracy: 0.3594\n","Epoch 952/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3675 - accuracy: 0.3047WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3675 - accuracy: 0.3047\n","Epoch 953/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3597 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3597 - accuracy: 0.3477\n","Epoch 954/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3610 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3610 - accuracy: 0.3359\n","Epoch 955/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3608 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3608 - accuracy: 0.3478\n","Epoch 956/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3627 - accuracy: 0.3174WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3627 - accuracy: 0.3174\n","Epoch 957/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3621 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3621 - accuracy: 0.3281\n","Epoch 958/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3590 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3590 - accuracy: 0.3438\n","Epoch 959/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3660 - accuracy: 0.3125WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3660 - accuracy: 0.3125\n","Epoch 960/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3609 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3609 - accuracy: 0.3348\n","Epoch 961/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3619 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3619 - accuracy: 0.3217\n","Epoch 962/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3665 - accuracy: 0.3217WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3665 - accuracy: 0.3217\n","Epoch 963/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3583 - accuracy: 0.3435WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3583 - accuracy: 0.3435\n","Epoch 964/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3659 - accuracy: 0.3164WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3659 - accuracy: 0.3164\n","Epoch 965/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3540 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3540 - accuracy: 0.3565\n","Epoch 966/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3557 - accuracy: 0.3565WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3557 - accuracy: 0.3565\n","Epoch 967/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3611 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3611 - accuracy: 0.3478\n","Epoch 968/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3630 - accuracy: 0.3087WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3630 - accuracy: 0.3087\n","Epoch 969/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3582 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3582 - accuracy: 0.3477\n","Epoch 970/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3634 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3634 - accuracy: 0.3391\n","Epoch 971/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3581 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3581 - accuracy: 0.3478\n","Epoch 972/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3647 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3647 - accuracy: 0.3359\n","Epoch 973/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3583 - accuracy: 0.3320WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3583 - accuracy: 0.3320\n","Epoch 974/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3592 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3592 - accuracy: 0.3555\n","Epoch 975/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3609 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3609 - accuracy: 0.3391\n","Epoch 976/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3612 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3612 - accuracy: 0.3478\n","Epoch 977/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3576 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3576 - accuracy: 0.3304\n","Epoch 978/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3602 - accuracy: 0.3348WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3602 - accuracy: 0.3348\n","Epoch 979/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3571 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3571 - accuracy: 0.3555\n","Epoch 980/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3535 - accuracy: 0.3783WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3535 - accuracy: 0.3783\n","Epoch 981/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3628 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3628 - accuracy: 0.3398\n","Epoch 982/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3594 - accuracy: 0.3359WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3594 - accuracy: 0.3359\n","Epoch 983/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3621 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3621 - accuracy: 0.3304\n","Epoch 984/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3622 - accuracy: 0.3130WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3622 - accuracy: 0.3130\n","Epoch 985/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3569 - accuracy: 0.3438WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3569 - accuracy: 0.3438\n","Epoch 986/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3639 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3639 - accuracy: 0.3281\n","Epoch 987/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3561 - accuracy: 0.3478WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3561 - accuracy: 0.3478\n","Epoch 988/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3598 - accuracy: 0.3391WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3598 - accuracy: 0.3391\n","Epoch 989/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3676 - accuracy: 0.3047WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3676 - accuracy: 0.3047\n","Epoch 990/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3541 - accuracy: 0.3750WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3541 - accuracy: 0.3750\n","Epoch 991/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3593 - accuracy: 0.3477WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3593 - accuracy: 0.3477\n","Epoch 992/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3651 - accuracy: 0.3261WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3651 - accuracy: 0.3261\n","Epoch 993/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3600 - accuracy: 0.3398WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3600 - accuracy: 0.3398\n","Epoch 994/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3516 - accuracy: 0.3789WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3516 - accuracy: 0.3789\n","Epoch 995/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3651 - accuracy: 0.3008WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3651 - accuracy: 0.3008\n","Epoch 996/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3569 - accuracy: 0.3516WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3569 - accuracy: 0.3516\n","Epoch 997/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3554 - accuracy: 0.3696WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3554 - accuracy: 0.3696\n","Epoch 998/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3626 - accuracy: 0.3281WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3626 - accuracy: 0.3281\n","Epoch 999/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3623 - accuracy: 0.3304WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3623 - accuracy: 0.3304\n","Epoch 1000/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3578 - accuracy: 0.3555WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,accuracy\n","WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","1/1 [==============================] - 2s 2s/step - loss: 1.3578 - accuracy: 0.3555\n"]}]},{"cell_type":"code","source":["!python resnet50_predict.py resnet50_final.h5 ./data/test/winter.jpg"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"upQ9gZjAb8Sx","executionInfo":{"status":"ok","timestamp":1682481678197,"user_tz":-540,"elapsed":17739,"user":{"displayName":"박민수","userId":"07044323519487942912"}},"outputId":"dc3b9f46-ae4a-44dd-b1a3-2813ae8f39df"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2023-04-26 04:01:01.399835: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n","To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n","2023-04-26 04:01:02.513933: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n","Loading model: resnet50_final.h5\n","2023-04-26 04:01:05.266415: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:01:05.297560: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:01:05.297855: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:01:05.298534: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:01:05.298798: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:01:05.298987: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:01:06.326146: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:01:06.326472: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:01:06.326732: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:01:06.326920: W tensorflow/core/common_runtime/gpu/gpu_bfc_allocator.cc:47] Overriding orig_value setting because the TF_FORCE_GPU_ALLOW_GROWTH environment variable is set. Original config value was 0.\n","2023-04-26 04:01:06.326975: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13678 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n","Loaded in: 7.679355144500732\n","Generating predictions on image: ./data/test/winter.jpg\n","2023-04-26 04:01:14.682419: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:424] Loaded cuDNN version 8700\n","1/1 [==============================] - 3s 3s/step\n","<class 'numpy.ndarray'>\n","[[0.22940652 0.23059711 0.23804356 0.30195278]]\n"]}]},{"cell_type":"code","source":["!python resnet50_predict.py resnet50_final.h5 ./data/test/fall.jpg"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2aEsckTne-rA","executionInfo":{"status":"ok","timestamp":1682481730404,"user_tz":-540,"elapsed":11798,"user":{"displayName":"박민수","userId":"07044323519487942912"}},"outputId":"c91cdb13-37f9-457b-b687-9cd4c445a5f0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2023-04-26 04:01:59.123915: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n","To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n","2023-04-26 04:02:00.003283: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n","Loading model: resnet50_final.h5\n","2023-04-26 04:02:01.720909: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:01.757616: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:01.757924: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:01.758637: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:01.758886: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:01.759075: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:02.887755: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:02.888177: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:02.888486: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:02.888733: W tensorflow/core/common_runtime/gpu/gpu_bfc_allocator.cc:47] Overriding orig_value setting because the TF_FORCE_GPU_ALLOW_GROWTH environment variable is set. Original config value was 0.\n","2023-04-26 04:02:02.888808: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13678 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n","Loaded in: 3.2248013019561768\n","Generating predictions on image: ./data/test/fall.jpg\n","2023-04-26 04:02:07.040613: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:424] Loaded cuDNN version 8700\n","1/1 [==============================] - 4s 4s/step\n","<class 'numpy.ndarray'>\n","[[0.23222922 0.22072385 0.25825357 0.2887933 ]]\n"]}]},{"cell_type":"code","source":["!python resnet50_predict.py resnet50_final.h5 ./data/test/summer.jpg"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TRn9_D3AuUFJ","executionInfo":{"status":"ok","timestamp":1682481753989,"user_tz":-540,"elapsed":11740,"user":{"displayName":"박민수","userId":"07044323519487942912"}},"outputId":"307afeda-a44f-422a-9273-efeda6ce8e22"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2023-04-26 04:02:22.867957: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n","To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n","2023-04-26 04:02:23.756066: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n","Loading model: resnet50_final.h5\n","2023-04-26 04:02:25.650792: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:25.681384: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:25.681691: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:25.682423: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:25.682683: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:25.682893: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:26.755865: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:26.756273: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:26.756559: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:26.756789: W tensorflow/core/common_runtime/gpu/gpu_bfc_allocator.cc:47] Overriding orig_value setting because the TF_FORCE_GPU_ALLOW_GROWTH environment variable is set. Original config value was 0.\n","2023-04-26 04:02:26.756852: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13678 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n","Loaded in: 3.771909713745117\n","Generating predictions on image: ./data/test/summer.jpg\n","2023-04-26 04:02:30.941611: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:424] Loaded cuDNN version 8700\n","1/1 [==============================] - 3s 3s/step\n","<class 'numpy.ndarray'>\n","[[0.23492478 0.2352766  0.2533867  0.27641198]]\n"]}]},{"cell_type":"code","source":["!python resnet50_predict.py resnet50_final.h5 ./data/test/spring.jpg"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZmHdE3EquUM4","executionInfo":{"status":"ok","timestamp":1682481764837,"user_tz":-540,"elapsed":10879,"user":{"displayName":"박민수","userId":"07044323519487942912"}},"outputId":"1ec51ba0-dc38-49e1-b6d9-8e58d66a256c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2023-04-26 04:02:34.352748: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n","To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n","2023-04-26 04:02:35.586630: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n","Loading model: resnet50_final.h5\n","2023-04-26 04:02:37.463143: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:37.492674: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:37.492950: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:37.493657: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:37.493893: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:37.494079: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:38.487512: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:38.487878: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:38.488075: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:02:38.488218: W tensorflow/core/common_runtime/gpu/gpu_bfc_allocator.cc:47] Overriding orig_value setting because the TF_FORCE_GPU_ALLOW_GROWTH environment variable is set. Original config value was 0.\n","2023-04-26 04:02:38.488260: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13678 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n","Loaded in: 2.985593795776367\n","Generating predictions on image: ./data/test/spring.jpg\n","2023-04-26 04:02:42.102292: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:424] Loaded cuDNN version 8700\n","1/1 [==============================] - 3s 3s/step\n","<class 'numpy.ndarray'>\n","[[0.23494479 0.22126475 0.25557446 0.28821602]]\n"]}]},{"cell_type":"markdown","source":["## resnet50새로 학습"],"metadata":{"id":"3dnOOEAluUUb"}},{"cell_type":"code","source":["!python resnet50_train.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"REigyYu7b8Wg","executionInfo":{"status":"ok","timestamp":1682482476571,"user_tz":-540,"elapsed":161555,"user":{"displayName":"박민수","userId":"07044323519487942912"}},"outputId":"7609ae95-8119-47b9-c470-964de8048ecd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2023-04-26 04:11:55.196137: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n","To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n","2023-04-26 04:11:56.159087: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n","2023-04-26 04:11:57.551491: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:11:57.583145: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:11:57.583417: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","Found 213 images belonging to 4 classes.\n","Found 204 images belonging to 4 classes.\n","2023-04-26 04:11:57.776094: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:11:57.776426: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:11:57.776646: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:11:58.797386: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:11:58.797691: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:11:58.797896: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:11:58.798070: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13678 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n","/usr/local/lib/python3.9/dist-packages/keras/optimizers/legacy/adam.py:117: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super().__init__(name, **kwargs)\n","/content/drive/MyDrive/finetuned-resnet50-keras/resnet50_train.py:73: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  finetuned_model.fit_generator(batches, steps_per_epoch=num_train_steps, epochs=1000, callbacks=[early_stopping, checkpointer], validation_data=val_batches, validation_steps=num_valid_steps)\n","2023-04-26 04:12:01.087036: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype int32\n","\t [[{{node Placeholder/_0}}]]\n","Epoch 1/1000\n","2023-04-26 04:12:06.342160: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:424] Loaded cuDNN version 8700\n","1/1 [==============================] - ETA: 0s - loss: 1.3846 - accuracy: 0.26562023-04-26 04:12:37.590282: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype int32\n","\t [[{{node Placeholder/_0}}]]\n","\n","Epoch 1: val_loss improved from inf to 1.38456, saving model to resnet50_best.h5\n","1/1 [==============================] - 54s 54s/step - loss: 1.3846 - accuracy: 0.2656 - val_loss: 1.3846 - val_accuracy: 0.2891\n","Epoch 2/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3844 - accuracy: 0.2969\n","Epoch 2: val_loss did not improve from 1.38456\n","1/1 [==============================] - 2s 2s/step - loss: 1.3844 - accuracy: 0.2969 - val_loss: 1.3865 - val_accuracy: 0.2891\n","Epoch 3/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3851 - accuracy: 0.2344\n","Epoch 3: val_loss improved from 1.38456 to 1.38387, saving model to resnet50_best.h5\n","1/1 [==============================] - 3s 3s/step - loss: 1.3851 - accuracy: 0.2344 - val_loss: 1.3839 - val_accuracy: 0.3281\n","Epoch 4/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3845 - accuracy: 0.3125\n","Epoch 4: val_loss did not improve from 1.38387\n","1/1 [==============================] - 2s 2s/step - loss: 1.3845 - accuracy: 0.3125 - val_loss: 1.3855 - val_accuracy: 0.2188\n","Epoch 5/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3868 - accuracy: 0.2353\n","Epoch 5: val_loss did not improve from 1.38387\n","1/1 [==============================] - 4s 4s/step - loss: 1.3868 - accuracy: 0.2353 - val_loss: 1.3863 - val_accuracy: 0.2500\n","Epoch 6/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3857 - accuracy: 0.2500\n","Epoch 6: val_loss did not improve from 1.38387\n","1/1 [==============================] - 2s 2s/step - loss: 1.3857 - accuracy: 0.2500 - val_loss: 1.3852 - val_accuracy: 0.2422\n","Epoch 7/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3852 - accuracy: 0.2353\n","Epoch 7: val_loss did not improve from 1.38387\n","1/1 [==============================] - 2s 2s/step - loss: 1.3852 - accuracy: 0.2353 - val_loss: 1.3873 - val_accuracy: 0.2344\n","Epoch 8/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3828 - accuracy: 0.3059\n","Epoch 8: val_loss did not improve from 1.38387\n","1/1 [==============================] - 2s 2s/step - loss: 1.3828 - accuracy: 0.3059 - val_loss: 1.3842 - val_accuracy: 0.2891\n","Epoch 9/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3856 - accuracy: 0.2656\n","Epoch 9: val_loss did not improve from 1.38387\n","1/1 [==============================] - 2s 2s/step - loss: 1.3856 - accuracy: 0.2656 - val_loss: 1.3865 - val_accuracy: 0.2891\n","Epoch 10/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3853 - accuracy: 0.2824\n","Epoch 10: val_loss did not improve from 1.38387\n","1/1 [==============================] - 2s 2s/step - loss: 1.3853 - accuracy: 0.2824 - val_loss: 1.3866 - val_accuracy: 0.2891\n","Epoch 11/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3852 - accuracy: 0.2941\n","Epoch 11: val_loss did not improve from 1.38387\n","1/1 [==============================] - 2s 2s/step - loss: 1.3852 - accuracy: 0.2941 - val_loss: 1.3852 - val_accuracy: 0.2656\n","Epoch 12/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3873 - accuracy: 0.2000\n","Epoch 12: val_loss did not improve from 1.38387\n","1/1 [==============================] - 2s 2s/step - loss: 1.3873 - accuracy: 0.2000 - val_loss: 1.3849 - val_accuracy: 0.3125\n","Epoch 13/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3848 - accuracy: 0.3125\n","Epoch 13: val_loss did not improve from 1.38387\n","1/1 [==============================] - 2s 2s/step - loss: 1.3848 - accuracy: 0.3125 - val_loss: 1.3857 - val_accuracy: 0.2344\n","Epoch 14/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3841 - accuracy: 0.3203\n","Epoch 14: val_loss did not improve from 1.38387\n","1/1 [==============================] - 2s 2s/step - loss: 1.3841 - accuracy: 0.3203 - val_loss: 1.3877 - val_accuracy: 0.2734\n","Epoch 15/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3863 - accuracy: 0.2734\n","Epoch 15: val_loss did not improve from 1.38387\n","1/1 [==============================] - 2s 2s/step - loss: 1.3863 - accuracy: 0.2734 - val_loss: 1.3854 - val_accuracy: 0.2812\n","Epoch 16/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3846 - accuracy: 0.2969\n","Epoch 16: val_loss did not improve from 1.38387\n","1/1 [==============================] - 2s 2s/step - loss: 1.3846 - accuracy: 0.2969 - val_loss: 1.3858 - val_accuracy: 0.3281\n","Epoch 17/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3850 - accuracy: 0.3059\n","Epoch 17: val_loss did not improve from 1.38387\n","1/1 [==============================] - 2s 2s/step - loss: 1.3850 - accuracy: 0.3059 - val_loss: 1.3867 - val_accuracy: 0.2266\n","Epoch 18/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3854 - accuracy: 0.3059\n","Epoch 18: val_loss improved from 1.38387 to 1.38368, saving model to resnet50_best.h5\n","1/1 [==============================] - 4s 4s/step - loss: 1.3854 - accuracy: 0.3059 - val_loss: 1.3837 - val_accuracy: 0.2734\n","Epoch 19/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3847 - accuracy: 0.2734\n","Epoch 19: val_loss did not improve from 1.38368\n","1/1 [==============================] - 2s 2s/step - loss: 1.3847 - accuracy: 0.2734 - val_loss: 1.3863 - val_accuracy: 0.2656\n","Epoch 20/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3842 - accuracy: 0.2824\n","Epoch 20: val_loss did not improve from 1.38368\n","1/1 [==============================] - 2s 2s/step - loss: 1.3842 - accuracy: 0.2824 - val_loss: 1.3890 - val_accuracy: 0.2031\n","Epoch 21/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3851 - accuracy: 0.2588\n","Epoch 21: val_loss did not improve from 1.38368\n","1/1 [==============================] - 2s 2s/step - loss: 1.3851 - accuracy: 0.2588 - val_loss: 1.3850 - val_accuracy: 0.2969\n","Epoch 22/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3863 - accuracy: 0.2578\n","Epoch 22: val_loss did not improve from 1.38368\n","1/1 [==============================] - 2s 2s/step - loss: 1.3863 - accuracy: 0.2578 - val_loss: 1.3853 - val_accuracy: 0.2891\n","Epoch 23/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3859 - accuracy: 0.2656\n","Epoch 23: val_loss did not improve from 1.38368\n","1/1 [==============================] - 2s 2s/step - loss: 1.3859 - accuracy: 0.2656 - val_loss: 1.3866 - val_accuracy: 0.2656\n","Epoch 24/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3847 - accuracy: 0.2706\n","Epoch 24: val_loss did not improve from 1.38368\n","1/1 [==============================] - 2s 2s/step - loss: 1.3847 - accuracy: 0.2706 - val_loss: 1.3867 - val_accuracy: 0.2344\n","Epoch 25/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3830 - accuracy: 0.2706\n","Epoch 25: val_loss improved from 1.38368 to 1.38331, saving model to resnet50_best.h5\n","1/1 [==============================] - 3s 3s/step - loss: 1.3830 - accuracy: 0.2706 - val_loss: 1.3833 - val_accuracy: 0.3047\n","Epoch 26/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3829 - accuracy: 0.2824\n","Epoch 26: val_loss did not improve from 1.38331\n","1/1 [==============================] - 2s 2s/step - loss: 1.3829 - accuracy: 0.2824 - val_loss: 1.3836 - val_accuracy: 0.3281\n","Epoch 27/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3844 - accuracy: 0.2353\n","Epoch 27: val_loss did not improve from 1.38331\n","1/1 [==============================] - 2s 2s/step - loss: 1.3844 - accuracy: 0.2353 - val_loss: 1.3858 - val_accuracy: 0.2266\n","Epoch 28/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3854 - accuracy: 0.2000\n","Epoch 28: val_loss did not improve from 1.38331\n","1/1 [==============================] - 2s 2s/step - loss: 1.3854 - accuracy: 0.2000 - val_loss: 1.3860 - val_accuracy: 0.2500\n","Epoch 29/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3827 - accuracy: 0.3529\n","Epoch 29: val_loss did not improve from 1.38331\n","1/1 [==============================] - 2s 2s/step - loss: 1.3827 - accuracy: 0.3529 - val_loss: 1.3868 - val_accuracy: 0.2422\n","Epoch 30/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3848 - accuracy: 0.2734\n","Epoch 30: val_loss did not improve from 1.38331\n","1/1 [==============================] - 2s 2s/step - loss: 1.3848 - accuracy: 0.2734 - val_loss: 1.3856 - val_accuracy: 0.2734\n","Epoch 31/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3848 - accuracy: 0.2578\n","Epoch 31: val_loss did not improve from 1.38331\n","1/1 [==============================] - 2s 2s/step - loss: 1.3848 - accuracy: 0.2578 - val_loss: 1.3846 - val_accuracy: 0.3281\n","Epoch 32/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3839 - accuracy: 0.2941\n","Epoch 32: val_loss did not improve from 1.38331\n","1/1 [==============================] - 2s 2s/step - loss: 1.3839 - accuracy: 0.2941 - val_loss: 1.3841 - val_accuracy: 0.3125\n","Epoch 33/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3846 - accuracy: 0.2824\n","Epoch 33: val_loss did not improve from 1.38331\n","1/1 [==============================] - 2s 2s/step - loss: 1.3846 - accuracy: 0.2824 - val_loss: 1.3867 - val_accuracy: 0.2266\n","Epoch 34/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3844 - accuracy: 0.3059\n","Epoch 34: val_loss did not improve from 1.38331\n","1/1 [==============================] - 2s 2s/step - loss: 1.3844 - accuracy: 0.3059 - val_loss: 1.3850 - val_accuracy: 0.3047\n","Epoch 35/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3828 - accuracy: 0.3516\n","Epoch 35: val_loss did not improve from 1.38331\n","1/1 [==============================] - 2s 2s/step - loss: 1.3828 - accuracy: 0.3516 - val_loss: 1.3865 - val_accuracy: 0.2500\n","Epoch 36/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3861 - accuracy: 0.2969\n","Epoch 36: val_loss did not improve from 1.38331\n","1/1 [==============================] - 2s 2s/step - loss: 1.3861 - accuracy: 0.2969 - val_loss: 1.3853 - val_accuracy: 0.2578\n","Epoch 37/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3823 - accuracy: 0.3412\n","Epoch 37: val_loss did not improve from 1.38331\n","1/1 [==============================] - 2s 2s/step - loss: 1.3823 - accuracy: 0.3412 - val_loss: 1.3854 - val_accuracy: 0.2500\n","Epoch 38/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3848 - accuracy: 0.2891\n","Epoch 38: val_loss did not improve from 1.38331\n","1/1 [==============================] - 2s 2s/step - loss: 1.3848 - accuracy: 0.2891 - val_loss: 1.3869 - val_accuracy: 0.3281\n","Epoch 39/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3853 - accuracy: 0.2734\n","Epoch 39: val_loss did not improve from 1.38331\n","1/1 [==============================] - 2s 2s/step - loss: 1.3853 - accuracy: 0.2734 - val_loss: 1.3858 - val_accuracy: 0.3047\n","Epoch 40/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3844 - accuracy: 0.3125\n","Epoch 40: val_loss did not improve from 1.38331\n","1/1 [==============================] - 2s 2s/step - loss: 1.3844 - accuracy: 0.3125 - val_loss: 1.3855 - val_accuracy: 0.2969\n","Epoch 41/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3841 - accuracy: 0.3125\n","Epoch 41: val_loss improved from 1.38331 to 1.38322, saving model to resnet50_best.h5\n","1/1 [==============================] - 4s 4s/step - loss: 1.3841 - accuracy: 0.3125 - val_loss: 1.3832 - val_accuracy: 0.2891\n","Epoch 42/1000\n","1/1 [==============================] - ETA: 0s - loss: 1.3863 - accuracy: 0.2118\n","Epoch 42: val_loss improved from 1.38322 to 1.38319, saving model to resnet50_best.h5\n","1/1 [==============================] - 3s 3s/step - loss: 1.3863 - accuracy: 0.2118 - val_loss: 1.3832 - val_accuracy: 0.2656\n","Traceback (most recent call last):\n","  File \"/content/drive/MyDrive/finetuned-resnet50-keras/resnet50_train.py\", line 73, in <module>\n","    finetuned_model.fit_generator(batches, steps_per_epoch=num_train_steps, epochs=1000, callbacks=[early_stopping, checkpointer], validation_data=val_batches, validation_steps=num_valid_steps)\n","  File \"/usr/local/lib/python3.9/dist-packages/keras/engine/training.py\", line 2636, in fit_generator\n","    return self.fit(\n","  File \"/usr/local/lib/python3.9/dist-packages/keras/utils/traceback_utils.py\", line 65, in error_handler\n","    return fn(*args, **kwargs)\n","  File \"/usr/local/lib/python3.9/dist-packages/keras/engine/training.py\", line 1673, in fit\n","    self.reset_metrics()\n","KeyboardInterrupt\n","^C\n"]}]},{"cell_type":"code","source":["!python resnet50_predict.py resnet50_best2.h5 ./data/test/spring.jpg"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8tYbg0lXxZQo","executionInfo":{"status":"ok","timestamp":1682482538167,"user_tz":-540,"elapsed":13560,"user":{"displayName":"박민수","userId":"07044323519487942912"}},"outputId":"b04772f9-8ae0-4a79-c6d6-9ef797eb7b17"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2023-04-26 04:15:25.356670: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n","To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n","2023-04-26 04:15:26.173364: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n","Loading model: resnet50_best2.h5\n","2023-04-26 04:15:29.537513: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:15:29.580826: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:15:29.581162: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:15:29.582067: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:15:29.582356: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:15:29.582580: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:15:30.625755: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:15:30.626046: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:15:30.626278: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:996] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-04-26 04:15:30.626444: W tensorflow/core/common_runtime/gpu/gpu_bfc_allocator.cc:47] Overriding orig_value setting because the TF_FORCE_GPU_ALLOW_GROWTH environment variable is set. Original config value was 0.\n","2023-04-26 04:15:30.626497: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13678 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n","Loaded in: 5.3371453285217285\n","Generating predictions on image: ./data/test/spring.jpg\n","2023-04-26 04:15:35.180183: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:424] Loaded cuDNN version 8700\n","1/1 [==============================] - 3s 3s/step\n","<class 'numpy.ndarray'>\n","[[0.25005168 0.23983881 0.24864015 0.26146936]]\n"]}]},{"cell_type":"markdown","source":["# resnet152v2 사용"],"metadata":{"id":"e7p_VqZcBHAR"}},{"cell_type":"code","source":["import tensorflow as tf\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.layers import *\n","from tensorflow.keras.models import Model,Sequential\n","\n","from keras.callbacks import EarlyStopping, ModelCheckpoint\n","\n","import datetime as dt\n","\n","train_path = '../color_data/train/'\n","val_path = '../train_face/'\n","\n","# 예측할 클래스 수\n","classes = 4\n","\n","# Input으로 사용될 크기와 채널수\n","height = 256\n","width = 256\n","channels = 3\n","\n","\n","image_generator = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1/255,\n","                                                                  rotation_range = 45,\n","                                                                  width_shift_range = 0.2,\n","                                                                  height_shift_range = 0.2,\n","                                                                  shear_range = 0.2,\n","                                                                  zoom_range = 0.7,\n","                                                                  horizontal_flip = True,\n","                                                                  validation_split=0.33,)\n","\n","image_data_train = image_generator.flow_from_directory(train_path,subset='training')\n","image_data_test = image_generator.flow_from_directory(val_path,subset='validation')\n","\n","print(image_data_train.class_indices)\n","\n","resnetv2 = tf.keras.applications.ResNet152V2(include_top=False,input_shape=(height,width,channels))\n","\n","\n","resnetv2.trainable=False\n","\n","\n","model = Sequential([\n","                 resnetv2,\n","                 Dense(512,activation='relu'),\n","                 BatchNormalization(),\n","                 GlobalAveragePooling2D(),\n","                 Dense(classes,activation='softmax')\n","])\n","\n","model.compile(optimizer='adam',loss='categorical_crossentropy',metrics='accuracy')\n","\n","def scheduler(epoch, lr):\n","    if epoch < 2:\n","        return lr\n","    else:\n","        return lr * tf.math.exp(-0.1)\n","\n","lrs = tf.keras.callbacks.LearningRateScheduler(scheduler)\n","\n","# model.fit(image_data_train,batch_size=32,epochs=10,callbacks=[lrs],validation_data=(image_data_test),\n","#           validation_steps =image_data_test.samples/image_data_test.batch_size)\n","\n","early_stopping = EarlyStopping(patience=50)\n","\n","checkpointer = ModelCheckpoint(f'resnet152v2_best_{dt.datetime.now()}.h5', verbose=1, save_best_only=True)\n","\n","model.fit(image_data_train,batch_size=256,epochs=100, callbacks=[lrs, early_stopping, checkpointer],validation_data=(image_data_test),\n","          validation_steps =image_data_test.samples/image_data_test.batch_size)\n","model.save('resnet152v2_final4.h5')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b05ebb7D_TKS","executionInfo":{"status":"ok","timestamp":1682572612537,"user_tz":-540,"elapsed":983862,"user":{"displayName":"박민수","userId":"07044323519487942912"}},"outputId":"8d69c168-fd74-468b-a195-9a3d7ab12575"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 341 images belonging to 4 classes.\n","Found 68 images belonging to 4 classes.\n","{'autumn_warm': 0, 'spring_warm': 1, 'summer_cool': 2, 'winter_cool': 3}\n","Epoch 1/100\n","11/11 [==============================] - ETA: 0s - loss: 1.5368 - accuracy: 0.3314\n","Epoch 1: val_loss improved from inf to 2.13313, saving model to resnet152v2_best_2023-04-27 05:00:34.633544.h5\n","11/11 [==============================] - 23s 1s/step - loss: 1.5368 - accuracy: 0.3314 - val_loss: 2.1331 - val_accuracy: 0.2794 - lr: 0.0010\n","Epoch 2/100\n","11/11 [==============================] - ETA: 0s - loss: 1.3602 - accuracy: 0.4223\n","Epoch 2: val_loss improved from 2.13313 to 1.98205, saving model to resnet152v2_best_2023-04-27 05:00:34.633544.h5\n","11/11 [==============================] - 11s 975ms/step - loss: 1.3602 - accuracy: 0.4223 - val_loss: 1.9820 - val_accuracy: 0.2794 - lr: 0.0010\n","Epoch 3/100\n","11/11 [==============================] - ETA: 0s - loss: 1.3506 - accuracy: 0.3930\n","Epoch 3: val_loss improved from 1.98205 to 1.50984, saving model to resnet152v2_best_2023-04-27 05:00:34.633544.h5\n","11/11 [==============================] - 12s 1s/step - loss: 1.3506 - accuracy: 0.3930 - val_loss: 1.5098 - val_accuracy: 0.3088 - lr: 9.0484e-04\n","Epoch 4/100\n","11/11 [==============================] - ETA: 0s - loss: 1.2557 - accuracy: 0.4457\n","Epoch 4: val_loss improved from 1.50984 to 1.26778, saving model to resnet152v2_best_2023-04-27 05:00:34.633544.h5\n","11/11 [==============================] - 10s 889ms/step - loss: 1.2557 - accuracy: 0.4457 - val_loss: 1.2678 - val_accuracy: 0.4412 - lr: 8.1873e-04\n","Epoch 5/100\n","11/11 [==============================] - ETA: 0s - loss: 1.1621 - accuracy: 0.5396\n","Epoch 5: val_loss did not improve from 1.26778\n","11/11 [==============================] - 9s 816ms/step - loss: 1.1621 - accuracy: 0.5396 - val_loss: 1.4288 - val_accuracy: 0.4118 - lr: 7.4082e-04\n","Epoch 6/100\n","11/11 [==============================] - ETA: 0s - loss: 1.1680 - accuracy: 0.4780\n","Epoch 6: val_loss improved from 1.26778 to 1.21390, saving model to resnet152v2_best_2023-04-27 05:00:34.633544.h5\n","11/11 [==============================] - 12s 1s/step - loss: 1.1680 - accuracy: 0.4780 - val_loss: 1.2139 - val_accuracy: 0.5147 - lr: 6.7032e-04\n","Epoch 7/100\n","11/11 [==============================] - ETA: 0s - loss: 1.1060 - accuracy: 0.5220\n","Epoch 7: val_loss did not improve from 1.21390\n","11/11 [==============================] - 10s 818ms/step - loss: 1.1060 - accuracy: 0.5220 - val_loss: 1.2437 - val_accuracy: 0.5000 - lr: 6.0653e-04\n","Epoch 8/100\n","11/11 [==============================] - ETA: 0s - loss: 1.1184 - accuracy: 0.4868\n","Epoch 8: val_loss did not improve from 1.21390\n","11/11 [==============================] - 9s 823ms/step - loss: 1.1184 - accuracy: 0.4868 - val_loss: 1.3854 - val_accuracy: 0.3824 - lr: 5.4881e-04\n","Epoch 9/100\n","11/11 [==============================] - ETA: 0s - loss: 1.1420 - accuracy: 0.4927\n","Epoch 9: val_loss improved from 1.21390 to 1.20288, saving model to resnet152v2_best_2023-04-27 05:00:34.633544.h5\n","11/11 [==============================] - 12s 1s/step - loss: 1.1420 - accuracy: 0.4927 - val_loss: 1.2029 - val_accuracy: 0.3676 - lr: 4.9659e-04\n","Epoch 10/100\n","11/11 [==============================] - ETA: 0s - loss: 1.0845 - accuracy: 0.5220\n","Epoch 10: val_loss did not improve from 1.20288\n","11/11 [==============================] - 10s 868ms/step - loss: 1.0845 - accuracy: 0.5220 - val_loss: 1.2967 - val_accuracy: 0.3971 - lr: 4.4933e-04\n","Epoch 11/100\n","11/11 [==============================] - ETA: 0s - loss: 1.0909 - accuracy: 0.5543\n","Epoch 11: val_loss did not improve from 1.20288\n","11/11 [==============================] - 9s 826ms/step - loss: 1.0909 - accuracy: 0.5543 - val_loss: 1.3001 - val_accuracy: 0.3382 - lr: 4.0657e-04\n","Epoch 12/100\n","11/11 [==============================] - ETA: 0s - loss: 1.0089 - accuracy: 0.5660\n","Epoch 12: val_loss did not improve from 1.20288\n","11/11 [==============================] - 8s 690ms/step - loss: 1.0089 - accuracy: 0.5660 - val_loss: 1.3873 - val_accuracy: 0.4118 - lr: 3.6788e-04\n","Epoch 13/100\n","11/11 [==============================] - ETA: 0s - loss: 1.0164 - accuracy: 0.5894\n","Epoch 13: val_loss did not improve from 1.20288\n","11/11 [==============================] - 8s 684ms/step - loss: 1.0164 - accuracy: 0.5894 - val_loss: 1.2472 - val_accuracy: 0.4412 - lr: 3.3287e-04\n","Epoch 14/100\n","11/11 [==============================] - ETA: 0s - loss: 1.0077 - accuracy: 0.6012\n","Epoch 14: val_loss improved from 1.20288 to 1.17091, saving model to resnet152v2_best_2023-04-27 05:00:34.633544.h5\n","11/11 [==============================] - 12s 1s/step - loss: 1.0077 - accuracy: 0.6012 - val_loss: 1.1709 - val_accuracy: 0.4706 - lr: 3.0119e-04\n","Epoch 15/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9823 - accuracy: 0.5982\n","Epoch 15: val_loss improved from 1.17091 to 1.06626, saving model to resnet152v2_best_2023-04-27 05:00:34.633544.h5\n","11/11 [==============================] - 11s 1s/step - loss: 0.9823 - accuracy: 0.5982 - val_loss: 1.0663 - val_accuracy: 0.5147 - lr: 2.7253e-04\n","Epoch 16/100\n","11/11 [==============================] - ETA: 0s - loss: 1.0276 - accuracy: 0.5630\n","Epoch 16: val_loss did not improve from 1.06626\n","11/11 [==============================] - 8s 690ms/step - loss: 1.0276 - accuracy: 0.5630 - val_loss: 1.1646 - val_accuracy: 0.4706 - lr: 2.4660e-04\n","Epoch 17/100\n","11/11 [==============================] - ETA: 0s - loss: 1.0257 - accuracy: 0.5718\n","Epoch 17: val_loss did not improve from 1.06626\n","11/11 [==============================] - 9s 823ms/step - loss: 1.0257 - accuracy: 0.5718 - val_loss: 1.1402 - val_accuracy: 0.5000 - lr: 2.2313e-04\n","Epoch 18/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9701 - accuracy: 0.5982\n","Epoch 18: val_loss did not improve from 1.06626\n","11/11 [==============================] - 9s 818ms/step - loss: 0.9701 - accuracy: 0.5982 - val_loss: 1.1490 - val_accuracy: 0.4706 - lr: 2.0190e-04\n","Epoch 19/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9737 - accuracy: 0.5718\n","Epoch 19: val_loss improved from 1.06626 to 1.01442, saving model to resnet152v2_best_2023-04-27 05:00:34.633544.h5\n","11/11 [==============================] - 11s 1s/step - loss: 0.9737 - accuracy: 0.5718 - val_loss: 1.0144 - val_accuracy: 0.6324 - lr: 1.8268e-04\n","Epoch 20/100\n","11/11 [==============================] - ETA: 0s - loss: 1.0245 - accuracy: 0.5513\n","Epoch 20: val_loss did not improve from 1.01442\n","11/11 [==============================] - 8s 715ms/step - loss: 1.0245 - accuracy: 0.5513 - val_loss: 1.1400 - val_accuracy: 0.5147 - lr: 1.6530e-04\n","Epoch 21/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9699 - accuracy: 0.5953\n","Epoch 21: val_loss did not improve from 1.01442\n","11/11 [==============================] - 9s 854ms/step - loss: 0.9699 - accuracy: 0.5953 - val_loss: 1.2001 - val_accuracy: 0.5147 - lr: 1.4957e-04\n","Epoch 22/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9663 - accuracy: 0.6070\n","Epoch 22: val_loss did not improve from 1.01442\n","11/11 [==============================] - 9s 816ms/step - loss: 0.9663 - accuracy: 0.6070 - val_loss: 1.1125 - val_accuracy: 0.5441 - lr: 1.3534e-04\n","Epoch 23/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9780 - accuracy: 0.5982\n","Epoch 23: val_loss did not improve from 1.01442\n","11/11 [==============================] - 8s 739ms/step - loss: 0.9780 - accuracy: 0.5982 - val_loss: 1.1658 - val_accuracy: 0.4706 - lr: 1.2246e-04\n","Epoch 24/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9679 - accuracy: 0.6129\n","Epoch 24: val_loss did not improve from 1.01442\n","11/11 [==============================] - 9s 806ms/step - loss: 0.9679 - accuracy: 0.6129 - val_loss: 1.0887 - val_accuracy: 0.5294 - lr: 1.1080e-04\n","Epoch 25/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9913 - accuracy: 0.5894\n","Epoch 25: val_loss did not improve from 1.01442\n","11/11 [==============================] - 8s 700ms/step - loss: 0.9913 - accuracy: 0.5894 - val_loss: 1.1989 - val_accuracy: 0.4559 - lr: 1.0026e-04\n","Epoch 26/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9491 - accuracy: 0.6305\n","Epoch 26: val_loss did not improve from 1.01442\n","11/11 [==============================] - 9s 796ms/step - loss: 0.9491 - accuracy: 0.6305 - val_loss: 1.1571 - val_accuracy: 0.4853 - lr: 9.0718e-05\n","Epoch 27/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9925 - accuracy: 0.5894\n","Epoch 27: val_loss did not improve from 1.01442\n","11/11 [==============================] - 9s 851ms/step - loss: 0.9925 - accuracy: 0.5894 - val_loss: 1.0153 - val_accuracy: 0.5000 - lr: 8.2085e-05\n","Epoch 28/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9413 - accuracy: 0.5982\n","Epoch 28: val_loss did not improve from 1.01442\n","11/11 [==============================] - 8s 696ms/step - loss: 0.9413 - accuracy: 0.5982 - val_loss: 1.1119 - val_accuracy: 0.5000 - lr: 7.4273e-05\n","Epoch 29/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9483 - accuracy: 0.5982\n","Epoch 29: val_loss did not improve from 1.01442\n","11/11 [==============================] - 9s 812ms/step - loss: 0.9483 - accuracy: 0.5982 - val_loss: 1.1183 - val_accuracy: 0.5294 - lr: 6.7205e-05\n","Epoch 30/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9750 - accuracy: 0.6012\n","Epoch 30: val_loss did not improve from 1.01442\n","11/11 [==============================] - 9s 812ms/step - loss: 0.9750 - accuracy: 0.6012 - val_loss: 1.0708 - val_accuracy: 0.5735 - lr: 6.0810e-05\n","Epoch 31/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9406 - accuracy: 0.6598\n","Epoch 31: val_loss improved from 1.01442 to 1.00261, saving model to resnet152v2_best_2023-04-27 05:00:34.633544.h5\n","11/11 [==============================] - 11s 1s/step - loss: 0.9406 - accuracy: 0.6598 - val_loss: 1.0026 - val_accuracy: 0.6324 - lr: 5.5023e-05\n","Epoch 32/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9635 - accuracy: 0.5660\n","Epoch 32: val_loss did not improve from 1.00261\n","11/11 [==============================] - 10s 890ms/step - loss: 0.9635 - accuracy: 0.5660 - val_loss: 1.0391 - val_accuracy: 0.5882 - lr: 4.9787e-05\n","Epoch 33/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9315 - accuracy: 0.6657\n","Epoch 33: val_loss did not improve from 1.00261\n","11/11 [==============================] - 8s 764ms/step - loss: 0.9315 - accuracy: 0.6657 - val_loss: 1.1515 - val_accuracy: 0.5000 - lr: 4.5049e-05\n","Epoch 34/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9419 - accuracy: 0.6276\n","Epoch 34: val_loss did not improve from 1.00261\n","11/11 [==============================] - 8s 719ms/step - loss: 0.9419 - accuracy: 0.6276 - val_loss: 1.1390 - val_accuracy: 0.4853 - lr: 4.0762e-05\n","Epoch 35/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9217 - accuracy: 0.6276\n","Epoch 35: val_loss did not improve from 1.00261\n","11/11 [==============================] - 9s 847ms/step - loss: 0.9217 - accuracy: 0.6276 - val_loss: 1.0435 - val_accuracy: 0.5588 - lr: 3.6883e-05\n","Epoch 36/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9332 - accuracy: 0.6129\n","Epoch 36: val_loss did not improve from 1.00261\n","11/11 [==============================] - 8s 713ms/step - loss: 0.9332 - accuracy: 0.6129 - val_loss: 1.0899 - val_accuracy: 0.4706 - lr: 3.3373e-05\n","Epoch 37/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9189 - accuracy: 0.6217\n","Epoch 37: val_loss did not improve from 1.00261\n","11/11 [==============================] - 9s 787ms/step - loss: 0.9189 - accuracy: 0.6217 - val_loss: 1.1293 - val_accuracy: 0.4706 - lr: 3.0197e-05\n","Epoch 38/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9519 - accuracy: 0.5982\n","Epoch 38: val_loss did not improve from 1.00261\n","11/11 [==============================] - 9s 815ms/step - loss: 0.9519 - accuracy: 0.5982 - val_loss: 1.0181 - val_accuracy: 0.5882 - lr: 2.7324e-05\n","Epoch 39/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9596 - accuracy: 0.5982\n","Epoch 39: val_loss did not improve from 1.00261\n","11/11 [==============================] - 8s 707ms/step - loss: 0.9596 - accuracy: 0.5982 - val_loss: 1.0301 - val_accuracy: 0.5147 - lr: 2.4723e-05\n","Epoch 40/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9069 - accuracy: 0.6217\n","Epoch 40: val_loss did not improve from 1.00261\n","11/11 [==============================] - 9s 806ms/step - loss: 0.9069 - accuracy: 0.6217 - val_loss: 1.0204 - val_accuracy: 0.5147 - lr: 2.2371e-05\n","Epoch 41/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9066 - accuracy: 0.6305\n","Epoch 41: val_loss did not improve from 1.00261\n","11/11 [==============================] - 8s 738ms/step - loss: 0.9066 - accuracy: 0.6305 - val_loss: 1.0888 - val_accuracy: 0.5588 - lr: 2.0242e-05\n","Epoch 42/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9723 - accuracy: 0.5777\n","Epoch 42: val_loss did not improve from 1.00261\n","11/11 [==============================] - 8s 731ms/step - loss: 0.9723 - accuracy: 0.5777 - val_loss: 1.1010 - val_accuracy: 0.4706 - lr: 1.8316e-05\n","Epoch 43/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9118 - accuracy: 0.6452\n","Epoch 43: val_loss improved from 1.00261 to 0.95324, saving model to resnet152v2_best_2023-04-27 05:00:34.633544.h5\n","11/11 [==============================] - 12s 1s/step - loss: 0.9118 - accuracy: 0.6452 - val_loss: 0.9532 - val_accuracy: 0.6176 - lr: 1.6573e-05\n","Epoch 44/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9307 - accuracy: 0.6393\n","Epoch 44: val_loss did not improve from 0.95324\n","11/11 [==============================] - 9s 830ms/step - loss: 0.9307 - accuracy: 0.6393 - val_loss: 1.0182 - val_accuracy: 0.5735 - lr: 1.4996e-05\n","Epoch 45/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9435 - accuracy: 0.6540\n","Epoch 45: val_loss did not improve from 0.95324\n","11/11 [==============================] - 8s 699ms/step - loss: 0.9435 - accuracy: 0.6540 - val_loss: 1.0715 - val_accuracy: 0.5441 - lr: 1.3569e-05\n","Epoch 46/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9114 - accuracy: 0.6598\n","Epoch 46: val_loss did not improve from 0.95324\n","11/11 [==============================] - 9s 803ms/step - loss: 0.9114 - accuracy: 0.6598 - val_loss: 1.0051 - val_accuracy: 0.6912 - lr: 1.2277e-05\n","Epoch 47/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9418 - accuracy: 0.6100\n","Epoch 47: val_loss did not improve from 0.95324\n","11/11 [==============================] - 8s 755ms/step - loss: 0.9418 - accuracy: 0.6100 - val_loss: 1.0982 - val_accuracy: 0.5441 - lr: 1.1109e-05\n","Epoch 48/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9485 - accuracy: 0.6246\n","Epoch 48: val_loss did not improve from 0.95324\n","11/11 [==============================] - 8s 694ms/step - loss: 0.9485 - accuracy: 0.6246 - val_loss: 1.1140 - val_accuracy: 0.4706 - lr: 1.0052e-05\n","Epoch 49/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9290 - accuracy: 0.6070\n","Epoch 49: val_loss did not improve from 0.95324\n","11/11 [==============================] - 9s 817ms/step - loss: 0.9290 - accuracy: 0.6070 - val_loss: 1.0179 - val_accuracy: 0.6176 - lr: 9.0953e-06\n","Epoch 50/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9337 - accuracy: 0.6158\n","Epoch 50: val_loss did not improve from 0.95324\n","11/11 [==============================] - 8s 761ms/step - loss: 0.9337 - accuracy: 0.6158 - val_loss: 1.1897 - val_accuracy: 0.4559 - lr: 8.2297e-06\n","Epoch 51/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9004 - accuracy: 0.6422\n","Epoch 51: val_loss did not improve from 0.95324\n","11/11 [==============================] - 8s 719ms/step - loss: 0.9004 - accuracy: 0.6422 - val_loss: 1.0349 - val_accuracy: 0.5735 - lr: 7.4466e-06\n","Epoch 52/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9192 - accuracy: 0.6188\n","Epoch 52: val_loss improved from 0.95324 to 0.93622, saving model to resnet152v2_best_2023-04-27 05:00:34.633544.h5\n","11/11 [==============================] - 12s 1s/step - loss: 0.9192 - accuracy: 0.6188 - val_loss: 0.9362 - val_accuracy: 0.6029 - lr: 6.7379e-06\n","Epoch 53/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9054 - accuracy: 0.6481\n","Epoch 53: val_loss did not improve from 0.93622\n","11/11 [==============================] - 9s 792ms/step - loss: 0.9054 - accuracy: 0.6481 - val_loss: 1.1182 - val_accuracy: 0.5588 - lr: 6.0967e-06\n","Epoch 54/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9457 - accuracy: 0.6276\n","Epoch 54: val_loss improved from 0.93622 to 0.89906, saving model to resnet152v2_best_2023-04-27 05:00:34.633544.h5\n","11/11 [==============================] - 12s 1s/step - loss: 0.9457 - accuracy: 0.6276 - val_loss: 0.8991 - val_accuracy: 0.6765 - lr: 5.5165e-06\n","Epoch 55/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9072 - accuracy: 0.6540\n","Epoch 55: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 692ms/step - loss: 0.9072 - accuracy: 0.6540 - val_loss: 1.1164 - val_accuracy: 0.4853 - lr: 4.9916e-06\n","Epoch 56/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9428 - accuracy: 0.6158\n","Epoch 56: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 892ms/step - loss: 0.9428 - accuracy: 0.6158 - val_loss: 1.0874 - val_accuracy: 0.5441 - lr: 4.5166e-06\n","Epoch 57/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9012 - accuracy: 0.6393\n","Epoch 57: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 755ms/step - loss: 0.9012 - accuracy: 0.6393 - val_loss: 1.0670 - val_accuracy: 0.5000 - lr: 4.0868e-06\n","Epoch 58/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9644 - accuracy: 0.5865\n","Epoch 58: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 697ms/step - loss: 0.9644 - accuracy: 0.5865 - val_loss: 1.0532 - val_accuracy: 0.5588 - lr: 3.6979e-06\n","Epoch 59/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9466 - accuracy: 0.6276\n","Epoch 59: val_loss did not improve from 0.89906\n","11/11 [==============================] - 10s 913ms/step - loss: 0.9466 - accuracy: 0.6276 - val_loss: 1.1405 - val_accuracy: 0.4265 - lr: 3.3460e-06\n","Epoch 60/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9009 - accuracy: 0.6393\n","Epoch 60: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 840ms/step - loss: 0.9009 - accuracy: 0.6393 - val_loss: 1.0809 - val_accuracy: 0.4706 - lr: 3.0275e-06\n","Epoch 61/100\n","11/11 [==============================] - ETA: 0s - loss: 0.8929 - accuracy: 0.6246\n","Epoch 61: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 692ms/step - loss: 0.8929 - accuracy: 0.6246 - val_loss: 1.0934 - val_accuracy: 0.5882 - lr: 2.7394e-06\n","Epoch 62/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9440 - accuracy: 0.6364\n","Epoch 62: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 796ms/step - loss: 0.9440 - accuracy: 0.6364 - val_loss: 1.0539 - val_accuracy: 0.6029 - lr: 2.4787e-06\n","Epoch 63/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9059 - accuracy: 0.6569\n","Epoch 63: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 706ms/step - loss: 0.9059 - accuracy: 0.6569 - val_loss: 0.9447 - val_accuracy: 0.6618 - lr: 2.2429e-06\n","Epoch 64/100\n","11/11 [==============================] - ETA: 0s - loss: 0.8986 - accuracy: 0.6540\n","Epoch 64: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 742ms/step - loss: 0.8986 - accuracy: 0.6540 - val_loss: 0.9393 - val_accuracy: 0.6471 - lr: 2.0294e-06\n","Epoch 65/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9033 - accuracy: 0.6276\n","Epoch 65: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 802ms/step - loss: 0.9033 - accuracy: 0.6276 - val_loss: 0.9527 - val_accuracy: 0.6324 - lr: 1.8363e-06\n","Epoch 66/100\n","11/11 [==============================] - ETA: 0s - loss: 0.8970 - accuracy: 0.6334\n","Epoch 66: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 805ms/step - loss: 0.8970 - accuracy: 0.6334 - val_loss: 0.9810 - val_accuracy: 0.6029 - lr: 1.6616e-06\n","Epoch 67/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9123 - accuracy: 0.6364\n","Epoch 67: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 710ms/step - loss: 0.9123 - accuracy: 0.6364 - val_loss: 1.0934 - val_accuracy: 0.5441 - lr: 1.5034e-06\n","Epoch 68/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9047 - accuracy: 0.6422\n","Epoch 68: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 801ms/step - loss: 0.9047 - accuracy: 0.6422 - val_loss: 1.0966 - val_accuracy: 0.5588 - lr: 1.3604e-06\n","Epoch 69/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9101 - accuracy: 0.6452\n","Epoch 69: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 814ms/step - loss: 0.9101 - accuracy: 0.6452 - val_loss: 1.0363 - val_accuracy: 0.5735 - lr: 1.2309e-06\n","Epoch 70/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9073 - accuracy: 0.6393\n","Epoch 70: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 704ms/step - loss: 0.9073 - accuracy: 0.6393 - val_loss: 1.0360 - val_accuracy: 0.5735 - lr: 1.1138e-06\n","Epoch 71/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9365 - accuracy: 0.5924\n","Epoch 71: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 726ms/step - loss: 0.9365 - accuracy: 0.5924 - val_loss: 1.0240 - val_accuracy: 0.5441 - lr: 1.0078e-06\n","Epoch 72/100\n","11/11 [==============================] - ETA: 0s - loss: 0.8914 - accuracy: 0.6393\n","Epoch 72: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 809ms/step - loss: 0.8914 - accuracy: 0.6393 - val_loss: 0.9978 - val_accuracy: 0.5294 - lr: 9.1188e-07\n","Epoch 73/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9415 - accuracy: 0.6070\n","Epoch 73: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 694ms/step - loss: 0.9415 - accuracy: 0.6070 - val_loss: 1.0481 - val_accuracy: 0.5441 - lr: 8.2510e-07\n","Epoch 74/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9371 - accuracy: 0.6129\n","Epoch 74: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 804ms/step - loss: 0.9371 - accuracy: 0.6129 - val_loss: 1.0701 - val_accuracy: 0.5882 - lr: 7.4658e-07\n","Epoch 75/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9608 - accuracy: 0.5806\n","Epoch 75: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 758ms/step - loss: 0.9608 - accuracy: 0.5806 - val_loss: 1.0021 - val_accuracy: 0.6029 - lr: 6.7554e-07\n","Epoch 76/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9405 - accuracy: 0.6276\n","Epoch 76: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 678ms/step - loss: 0.9405 - accuracy: 0.6276 - val_loss: 1.0888 - val_accuracy: 0.5000 - lr: 6.1125e-07\n","Epoch 77/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9141 - accuracy: 0.6158\n","Epoch 77: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 809ms/step - loss: 0.9141 - accuracy: 0.6158 - val_loss: 0.9843 - val_accuracy: 0.5735 - lr: 5.5308e-07\n","Epoch 78/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9260 - accuracy: 0.6393\n","Epoch 78: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 737ms/step - loss: 0.9260 - accuracy: 0.6393 - val_loss: 1.0701 - val_accuracy: 0.5000 - lr: 5.0045e-07\n","Epoch 79/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9173 - accuracy: 0.6158\n","Epoch 79: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 715ms/step - loss: 0.9173 - accuracy: 0.6158 - val_loss: 1.0731 - val_accuracy: 0.5294 - lr: 4.5283e-07\n","Epoch 80/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9499 - accuracy: 0.6305\n","Epoch 80: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 792ms/step - loss: 0.9499 - accuracy: 0.6305 - val_loss: 1.1112 - val_accuracy: 0.4853 - lr: 4.0973e-07\n","Epoch 81/100\n","11/11 [==============================] - ETA: 0s - loss: 0.8933 - accuracy: 0.6716\n","Epoch 81: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 699ms/step - loss: 0.8933 - accuracy: 0.6716 - val_loss: 0.9947 - val_accuracy: 0.6029 - lr: 3.7074e-07\n","Epoch 82/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9227 - accuracy: 0.6276\n","Epoch 82: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 811ms/step - loss: 0.9227 - accuracy: 0.6276 - val_loss: 1.0730 - val_accuracy: 0.5441 - lr: 3.3546e-07\n","Epoch 83/100\n","11/11 [==============================] - ETA: 0s - loss: 0.8769 - accuracy: 0.6657\n","Epoch 83: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 771ms/step - loss: 0.8769 - accuracy: 0.6657 - val_loss: 1.0253 - val_accuracy: 0.5735 - lr: 3.0354e-07\n","Epoch 84/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9119 - accuracy: 0.6276\n","Epoch 84: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 700ms/step - loss: 0.9119 - accuracy: 0.6276 - val_loss: 1.0536 - val_accuracy: 0.5441 - lr: 2.7465e-07\n","Epoch 85/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9466 - accuracy: 0.5953\n","Epoch 85: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 699ms/step - loss: 0.9466 - accuracy: 0.5953 - val_loss: 1.0985 - val_accuracy: 0.5441 - lr: 2.4852e-07\n","Epoch 86/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9618 - accuracy: 0.6041\n","Epoch 86: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 792ms/step - loss: 0.9618 - accuracy: 0.6041 - val_loss: 1.0558 - val_accuracy: 0.5000 - lr: 2.2487e-07\n","Epoch 87/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9433 - accuracy: 0.6276\n","Epoch 87: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 826ms/step - loss: 0.9433 - accuracy: 0.6276 - val_loss: 1.0793 - val_accuracy: 0.5588 - lr: 2.0347e-07\n","Epoch 88/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9208 - accuracy: 0.6070\n","Epoch 88: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 712ms/step - loss: 0.9208 - accuracy: 0.6070 - val_loss: 1.0049 - val_accuracy: 0.5882 - lr: 1.8410e-07\n","Epoch 89/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9464 - accuracy: 0.5953\n","Epoch 89: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 797ms/step - loss: 0.9464 - accuracy: 0.5953 - val_loss: 1.0200 - val_accuracy: 0.5735 - lr: 1.6659e-07\n","Epoch 90/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9390 - accuracy: 0.6070\n","Epoch 90: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 799ms/step - loss: 0.9390 - accuracy: 0.6070 - val_loss: 1.0658 - val_accuracy: 0.5000 - lr: 1.5073e-07\n","Epoch 91/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9385 - accuracy: 0.5982\n","Epoch 91: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 691ms/step - loss: 0.9385 - accuracy: 0.5982 - val_loss: 1.0999 - val_accuracy: 0.5588 - lr: 1.3639e-07\n","Epoch 92/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9240 - accuracy: 0.6012\n","Epoch 92: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 800ms/step - loss: 0.9240 - accuracy: 0.6012 - val_loss: 1.0119 - val_accuracy: 0.5588 - lr: 1.2341e-07\n","Epoch 93/100\n","11/11 [==============================] - ETA: 0s - loss: 0.8870 - accuracy: 0.6364\n","Epoch 93: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 683ms/step - loss: 0.8870 - accuracy: 0.6364 - val_loss: 1.0593 - val_accuracy: 0.5441 - lr: 1.1167e-07\n","Epoch 94/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9542 - accuracy: 0.5982\n","Epoch 94: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 781ms/step - loss: 0.9542 - accuracy: 0.5982 - val_loss: 0.9843 - val_accuracy: 0.5735 - lr: 1.0104e-07\n","Epoch 95/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9433 - accuracy: 0.5806\n","Epoch 95: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 806ms/step - loss: 0.9433 - accuracy: 0.5806 - val_loss: 1.0352 - val_accuracy: 0.5441 - lr: 9.1424e-08\n","Epoch 96/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9401 - accuracy: 0.6188\n","Epoch 96: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 722ms/step - loss: 0.9401 - accuracy: 0.6188 - val_loss: 0.9797 - val_accuracy: 0.5588 - lr: 8.2724e-08\n","Epoch 97/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9496 - accuracy: 0.5953\n","Epoch 97: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 839ms/step - loss: 0.9496 - accuracy: 0.5953 - val_loss: 1.1502 - val_accuracy: 0.5000 - lr: 7.4851e-08\n","Epoch 98/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9248 - accuracy: 0.6276\n","Epoch 98: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 832ms/step - loss: 0.9248 - accuracy: 0.6276 - val_loss: 1.0034 - val_accuracy: 0.5441 - lr: 6.7728e-08\n","Epoch 99/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9760 - accuracy: 0.6129\n","Epoch 99: val_loss did not improve from 0.89906\n","11/11 [==============================] - 8s 703ms/step - loss: 0.9760 - accuracy: 0.6129 - val_loss: 1.0248 - val_accuracy: 0.5588 - lr: 6.1283e-08\n","Epoch 100/100\n","11/11 [==============================] - ETA: 0s - loss: 0.9038 - accuracy: 0.6422\n","Epoch 100: val_loss did not improve from 0.89906\n","11/11 [==============================] - 9s 818ms/step - loss: 0.9038 - accuracy: 0.6422 - val_loss: 0.9883 - val_accuracy: 0.6176 - lr: 5.5451e-08\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"ZEfdfNobBbIC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 결과 잘 나오는 모델 찾기"],"metadata":{"id":"_4F1MWbwB74J"}},{"cell_type":"code","source":["!ls ../color_data/train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GhmJBTAk1ero","executionInfo":{"status":"ok","timestamp":1682483591344,"user_tz":-540,"elapsed":670,"user":{"displayName":"박민수","userId":"07044323519487942912"}},"outputId":"03682ef3-e9f3-450c-e08b-6d9551a18cda"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["autumn_warm  spring_warm  summer_cool  winter_cool\n"]}]},{"cell_type":"code","source":["from tensorflow.keras.preprocessing.image import load_img\n","from tensorflow.keras.preprocessing.image import img_to_array\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","\n","from keras.models import load_model\n","\n","\n","img_height = 256\n","img_width = 256\n","\n","\n","# filename = ['../test_face/autumn_warm/face_000.jpg', \"../test_face/spring_warm/face_002.jpg\", \"../test_face/summer_cool/face_001.jpg\", \"../test_face/winter_cool/face_000.jpg\" ]\n","\n","filename = []\n","\n","path = \"../test_face2/\"\n","img_list = os.listdir(path)\n","for i in img_list:\n","  filename.append(path+i)\n","                    \n","predict_dictionary = {0:'autumn_warm',1:'spring_warm',2:'summer_cool', 3:\"winter_cool\"}\n","\n","model_path = \"./resnet152v2_best.h5\"\n","# model_path = \"./resnet50v2_final.h5\"\n","\n","model = load_model(model_path)\n","\n","answer_count = 0\n","f = 0\n","tone = 0\n","\n","a_list = []\n","f_list = []\n","\n","for file in filename:\n","    original = load_img(file, target_size = (img_height,img_width))\n","\n","    \n","    numpy_image = img_to_array(original)\n","    plt.text(30, 10, str(file.split(\"/\")[2]))\n","    plt.imshow(np.uint8(numpy_image))\n","    plt.show()\n","    print(\"numpy array size : \", numpy_image.shape)\n","    image_batch = np.expand_dims(numpy_image , axis = 0)\n","\n","    predict = np.argmax(model.predict(image_batch/255.))\n","\n","    print('결과 : ',predict_dictionary[predict])\n","    \n","    s1 = file.split(\"/\")[2].split(\"_\")[0]         \n","    s2 = file.split(\"/\")[2].split(\"_\")[1][:4]\n","\n","    if predict_dictionary[predict].split(\"_\")[1] == s2:\n","      tone += 1\n","      if predict_dictionary[predict].split(\"_\")[0] == s1:\n","        answer_count+=1\n","    else:\n","      f += 1\n","\n","\n","print(\"a :\", answer_count, \"tone :\", tone-answer_count, \" f :\", f)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1Y6GbR2nvmNE22bCl7pc8yIQkUmdNtjXS"},"id":"tC3jbPqwzVD3","executionInfo":{"status":"ok","timestamp":1682489497160,"user_tz":-540,"elapsed":34479,"user":{"displayName":"박민수","userId":"07044323519487942912"}},"outputId":"0be0ceb4-4b56-4a14-94e4-308b476f95b6"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","source":["from tensorflow.keras.preprocessing.image import load_img\n","from tensorflow.keras.preprocessing.image import img_to_array\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","\n","from keras.models import load_model\n","\n","\n","img_height = 256\n","img_width = 256\n","\n","\n","# filename = ['../test_face/autumn_warm/face_000.jpg', \"../test_face/spring_warm/face_002.jpg\", \"../test_face/summer_cool/face_001.jpg\", \"../test_face/winter_cool/face_000.jpg\" ]\n","\n","filename = []\n","\n","path = \"../test_face2/\"\n","img_list = os.listdir(path)\n","for i in img_list:\n","  filename.append(path+i)\n","                    \n","predict_dictionary = {0:'autumn_warm',1:'spring_warm',2:'summer_cool', 3:\"winter_cool\"}\n","\n","model_path = \"./resnet152v2_best.h5\"\n","# model_path = \"./resnet50v2_final.h5\"\n","\n","model = load_model(model_path)\n","\n","answer_count = 0\n","f = 0\n","tone = 0\n","\n","a_list = []\n","f_list = []\n","\n","for file in filename:\n","    original = load_img(file, target_size = (img_height,img_width))\n","\n","    \n","    numpy_image = img_to_array(original)\n","    plt.text(30, 10, str(file.split(\"/\")[2]))\n","    plt.imshow(np.uint8(numpy_image))\n","    plt.show()\n","    print(\"numpy array size : \", numpy_image.shape)\n","    image_batch = np.expand_dims(numpy_image , axis = 0)\n","\n","    predict = np.argmax(model.predict(image_batch/255.))\n","\n","    print('결과 : ',predict_dictionary[predict])\n","    \n","    s1 = file.split(\"/\")[2].split(\"_\")[0]         \n","    s2 = file.split(\"/\")[2].split(\"_\")[1][:4]\n","\n","    if predict_dictionary[predict].split(\"_\")[1] == s2:\n","      tone += 1\n","      if predict_dictionary[predict].split(\"_\")[0] == s1:\n","        answer_count+=1\n","    else:\n","      f += 1\n","      f_list.append()\n","\n","\n","print(\"a :\", answer_count, \"tone :\", tone-answer_count, \" f :\", f)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1R4crdeXgpOLLb3i6e9D-tIO9OXrqVqZK"},"id":"y27qdLMXOtXQ","executionInfo":{"status":"ok","timestamp":1682490234700,"user_tz":-540,"elapsed":45722,"user":{"displayName":"박민수","userId":"07044323519487942912"}},"outputId":"b15f0484-45b3-490d-a2b6-68ebbf8c3b3f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","source":["from tensorflow.keras.preprocessing.image import load_img\n","from tensorflow.keras.preprocessing.image import img_to_array\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","\n","from keras.models import load_model\n","\n","\n","img_height = 256\n","img_width = 256\n","\n","\n","# filename = ['../test_face/autumn_warm/face_000.jpg', \"../test_face/spring_warm/face_002.jpg\", \"../test_face/summer_cool/face_001.jpg\", \"../test_face/winter_cool/face_000.jpg\" ]\n","\n","filename = []\n","\n","path = \"../test_face2/\"\n","img_list = os.listdir(path)\n","for i in img_list:\n","  filename.append(path+i)\n","                    \n","predict_dictionary = {0:'autumn_warm',1:'spring_warm',2:'summer_cool', 3:\"winter_cool\"}\n","\n","model_path = \"./resnet152v2_best_1.h5\"\n","# model_path = \"./resnet50v2_final.h5\"\n","\n","model = load_model(model_path)\n","\n","answer_count = 0\n","f = 0\n","tone = 0\n","\n","a_list = []\n","f_list = []\n","\n","for file in filename:\n","    original = load_img(file, target_size = (img_height,img_width))\n","\n","    \n","    numpy_image = img_to_array(original)\n","    plt.text(30, 10, str(file.split(\"/\")[2]))\n","    plt.imshow(np.uint8(numpy_image))\n","    plt.show()\n","    print(\"numpy array size : \", numpy_image.shape)\n","    image_batch = np.expand_dims(numpy_image , axis = 0)\n","\n","    predict = np.argmax(model.predict(image_batch/255.))\n","\n","    print('결과 : ',predict_dictionary[predict])\n","    \n","    s1 = file.split(\"/\")[2].split(\"_\")[0]         \n","    s2 = file.split(\"/\")[2].split(\"_\")[1][:4]\n","\n","    if predict_dictionary[predict].split(\"_\")[1] == s2:\n","      tone += 1\n","      if predict_dictionary[predict].split(\"_\")[0] == s1:\n","        answer_count+=1\n","    else:\n","      f += 1\n","\n","\n","print(\"a :\", answer_count, \"tone :\", tone-answer_count, \" f :\", f)"],"metadata":{"id":"VYHuMC-kzsdb","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1aPJq2s1fT2DTTlxVJnFulGX4pWdG3JIB"},"executionInfo":{"status":"ok","timestamp":1682573145254,"user_tz":-540,"elapsed":38029,"user":{"displayName":"박민수","userId":"07044323519487942912"}},"outputId":"a6665a5d-43be-4c0c-f41a-cec9e44b8a58"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","source":["from tensorflow.keras.preprocessing.image import load_img\n","from tensorflow.keras.preprocessing.image import img_to_array\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","\n","from keras.models import load_model\n","\n","\n","img_height = 256\n","img_width = 256\n","\n","\n","# filename = ['../test_face/autumn_warm/face_000.jpg', \"../test_face/spring_warm/face_002.jpg\", \"../test_face/summer_cool/face_001.jpg\", \"../test_face/winter_cool/face_000.jpg\" ]\n","\n","filename = []\n","\n","path = \"../test_face2/\"\n","img_list = os.listdir(path)\n","for i in img_list:\n","  filename.append(path+i)\n","                    \n","predict_dictionary = {0:'autumn_warm',1:'spring_warm',2:'summer_cool', 3:\"winter_cool\"}\n","\n","model_path = \"./resnet152v2_best_2.h5\"\n","# model_path = \"./resnet50v2_final.h5\"\n","\n","model = load_model(model_path)\n","\n","answer_count = 0\n","f = 0\n","tone = 0\n","\n","a_list = []\n","f_list = []\n","\n","for file in filename:\n","    original = load_img(file, target_size = (img_height,img_width))\n","\n","    \n","    numpy_image = img_to_array(original)\n","    plt.text(30, 10, str(file.split(\"/\")[2]))\n","    plt.imshow(np.uint8(numpy_image))\n","    plt.show()\n","    print(\"numpy array size : \", numpy_image.shape)\n","    image_batch = np.expand_dims(numpy_image , axis = 0)\n","\n","    predict = np.argmax(model.predict(image_batch/255.))\n","\n","    print('결과 : ',predict_dictionary[predict])\n","    \n","    s1 = file.split(\"/\")[2].split(\"_\")[0]         \n","    s2 = file.split(\"/\")[2].split(\"_\")[1][:4]\n","\n","    if predict_dictionary[predict].split(\"_\")[1] == s2:\n","      tone += 1\n","      if predict_dictionary[predict].split(\"_\")[0] == s1:\n","        answer_count+=1\n","    else:\n","      f += 1\n","\n","\n","print(\"a :\", answer_count, \"tone :\", tone-answer_count, \" f :\", f)"],"metadata":{"id":"rc4rzLw0zsRL","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1tSPhVgPf8EV6OAQ0NLLE-3ge3Q2Yszyz"},"executionInfo":{"status":"ok","timestamp":1682573177237,"user_tz":-540,"elapsed":31991,"user":{"displayName":"박민수","userId":"07044323519487942912"}},"outputId":"1c53a047-dacc-4bce-d027-4c4bbd158217"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","source":["## 실제 환경 테스트"],"metadata":{"id":"r6oPZbO7B3Ey"}},{"cell_type":"code","source":["from tensorflow.keras.preprocessing.image import load_img\n","from tensorflow.keras.preprocessing.image import img_to_array\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","\n","from keras.models import load_model\n","\n","\n","img_height = 256\n","img_width = 256\n","\n","\n","# filename = ['../test_face/autumn_warm/face_000.jpg', \"../test_face/spring_warm/face_002.jpg\", \"../test_face/summer_cool/face_001.jpg\", \"../test_face/winter_cool/face_000.jpg\" ]\n","\n","filename = []\n","\n","path = \"./test/\"\n","img_list = os.listdir(path)\n","for i in img_list:\n","  filename.append(path+i)\n","                    \n","predict_dictionary = {0:'autumn_warm',1:'spring_warm',2:'summer_cool', 3:\"winter_cool\"}\n","\n","model_path = \"./resnet152v2_best_2.h5\"\n","# model_path = \"./resnet50v2_final.h5\"\n","\n","model = load_model(model_path)\n","\n","answer_count = 0\n","f = 0\n","tone = 0\n","\n","a_list = []\n","f_list = []\n","\n","for file in filename:\n","    original = load_img(file, target_size = (img_height,img_width))\n","\n","    \n","    numpy_image = img_to_array(original)\n","    plt.text(30, 10, str(file.split(\"/\")[2]))\n","    plt.imshow(np.uint8(numpy_image))\n","    plt.show()\n","    print(\"numpy array size : \", numpy_image.shape)\n","    image_batch = np.expand_dims(numpy_image , axis = 0)\n","\n","    predict = np.argmax(model.predict(image_batch/255.))\n","\n","    print('결과 : ',predict_dictionary[predict])\n","    \n","    s1 = file.split(\"/\")[2].split(\"_\")[0]         \n","    s2 = file.split(\"/\")[2].split(\"_\")[1][:4]\n","\n","    if predict_dictionary[predict].split(\"_\")[1] == s2:\n","      tone += 1\n","      if predict_dictionary[predict].split(\"_\")[0] == s1:\n","        answer_count+=1\n","    else:\n","      f += 1\n","\n","\n","print(\"a :\", answer_count, \"tone :\", tone-answer_count, \" f :\", f)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":705},"id":"9nX-s7SQK9yK","executionInfo":{"status":"error","timestamp":1682585051047,"user_tz":-540,"elapsed":29931,"user":{"displayName":"박민수","userId":"07044323519487942912"}},"outputId":"da2655b0-4cdd-453e-e911-2f9bf143843d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["numpy array size :  (256, 256, 3)\n","1/1 [==============================] - 11s 11s/step\n","결과 :  winter_cool\n"]},{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-6ac6057e0347>\u001b[0m in \u001b[0;36m<cell line: 37>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     51\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m     \u001b[0ms1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"_\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 53\u001b[0;31m     \u001b[0ms2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"_\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     54\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     55\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mpredict_dictionary\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"_\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0ms2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: list index out of range"]}]}]}